import { EVM_PLUGINS, PLUGIN_EVENTS, WalletServicesPluginError, WalletInitializationError } from '@web3auth/base';
import { createContext, useState, useContext, useEffect, useCallback, useMemo, createElement } from 'react';

const WalletServicesContext = createContext(null);
function WalletServicesContextProvider({
  children,
  context
}) {
  const [isPluginConnected, setIsPluginConnected] = useState(false);
  const [walletServicesPlugin, setWalletServicesPlugin] = useState(null);
  const web3AuthContext = useContext(context);
  useEffect(() => {
    const connectedListener = () => {
      setIsPluginConnected(true);
    };
    const disconnectedListener = () => {
      setIsPluginConnected(false);
    };
    const {
      getPlugin,
      isInitialized
    } = web3AuthContext;
    if (isInitialized) {
      const plugin = getPlugin(EVM_PLUGINS.WALLET_SERVICES);
      setWalletServicesPlugin(plugin);
    }
    if (walletServicesPlugin) {
      walletServicesPlugin.on(PLUGIN_EVENTS.CONNECTED, connectedListener);
      walletServicesPlugin.on(PLUGIN_EVENTS.DISCONNECTED, disconnectedListener);
    }
    return () => {
      if (walletServicesPlugin) {
        walletServicesPlugin.off(PLUGIN_EVENTS.CONNECTED, connectedListener);
        walletServicesPlugin.off(PLUGIN_EVENTS.DISCONNECTED, disconnectedListener);
      }
    };
  }, [walletServicesPlugin, web3AuthContext]);
  const showWalletConnectScanner = useCallback(async () => {
    if (!walletServicesPlugin) throw WalletServicesPluginError.notInitialized();
    if (!isPluginConnected) throw WalletServicesPluginError.walletPluginNotConnected();
    return walletServicesPlugin.showWalletConnectScanner();
  }, [walletServicesPlugin, isPluginConnected]);
  const showWalletUI = useCallback(async () => {
    if (!walletServicesPlugin) throw WalletServicesPluginError.notInitialized();
    if (!isPluginConnected) throw WalletServicesPluginError.walletPluginNotConnected();
    return walletServicesPlugin.showWalletUi();
  }, [walletServicesPlugin, isPluginConnected]);
  const showCheckout = useCallback(async () => {
    if (!walletServicesPlugin) throw WalletServicesPluginError.notInitialized();
    if (!isPluginConnected) throw WalletServicesPluginError.walletPluginNotConnected();
    return walletServicesPlugin.showCheckout();
  }, [walletServicesPlugin, isPluginConnected]);
  const value = useMemo(() => {
    return {
      plugin: walletServicesPlugin,
      isPluginConnected,
      showWalletConnectScanner,
      showCheckout,
      showWalletUI
    };
  }, [walletServicesPlugin, isPluginConnected, showWalletConnectScanner, showCheckout, showWalletUI]);
  return createElement(WalletServicesContext.Provider, {
    value
  }, children);
}

const useWalletServicesPlugin = () => {
  const context = useContext(WalletServicesContext);
  if (!context) {
    throw WalletInitializationError.fromCode(1000, "usage of useWalletServicesPlugin not wrapped in `WalletServicesContextProvider`.");
  }
  return context;
};

function WalletServicesProvider({
  children,
  context
}) {
  const wsElement = createElement(WalletServicesContextProvider, {
    context
  }, children);
  return wsElement;
}

export { WalletServicesContext, WalletServicesContextProvider, WalletServicesProvider, useWalletServicesPlugin };
