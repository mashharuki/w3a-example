import { SafeEventEmitter } from "@toruslabs/openlogin-jrpc";
import { type WhiteLabelData } from "@toruslabs/openlogin-utils";
import { IPlugin, IWeb3AuthCore, PLUGIN_STATUS_TYPE, PluginConnectParams, SafeEventEmitterProvider } from "@web3auth/base";
import WsEmbed, { CtorArgs, WsEmbedParams } from "@web3auth/ws-embed";
type WsPluginEmbedParams = Omit<WsEmbedParams, "buildEnv" | "enableLogging" | "chainConfig" | "confirmationStrategy"> & {
    /**
     * Determines how to show confirmation screens
     * @defaultValue default
     *
     * default & auto-approve
     * - use auto-approve as default
     * - if wallet connect request use modal
     *
     * modal
     * - use modal always
     */
    confirmationStrategy?: Exclude<WsEmbedParams["confirmationStrategy"], "popup">;
};
export declare class WalletServicesPlugin extends SafeEventEmitter implements IPlugin {
    name: "wallet-services";
    status: PLUGIN_STATUS_TYPE;
    readonly SUPPORTED_ADAPTERS: string[];
    readonly pluginNamespace: "eip155";
    wsEmbedInstance: WsEmbed;
    private provider;
    private web3auth;
    private isInitialized;
    private walletInitOptions;
    constructor(options?: {
        wsEmbedOpts?: Partial<CtorArgs>;
        walletInitOptions?: WsPluginEmbedParams;
    });
    get proxyProvider(): SafeEventEmitterProvider | null;
    initWithWeb3Auth(web3auth: IWeb3AuthCore, whiteLabel?: WhiteLabelData): Promise<void>;
    initWithProvider(): Promise<void>;
    connect({ sessionId, sessionNamespace }: PluginConnectParams): Promise<void>;
    showWalletConnectScanner(): Promise<void>;
    showCheckout(): Promise<void>;
    showWalletUi(): Promise<void>;
    disconnect(): Promise<void>;
    private subscribeToWalletEvents;
    private subscribeToProviderEvents;
    private subscribeToWeb3AuthEvents;
    private sessionConfig;
    private walletServicesSessionConfig;
    private setSelectedAddress;
    private setChainID;
}
export {};
