{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { CSSProperties, useMemo, useCallback } from 'react'\n\nexport type JsonObject =\n  | { [key: string]: JsonObject }\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\ninterface JsonStyle {\n  booleanStyle?: CSSProperties\n  braceStyle?: CSSProperties\n  bracketStyle?: CSSProperties\n  commaStyle?: CSSProperties\n  falseStyle?: CSSProperties\n  nullStyle?: CSSProperties\n  numberStyle?: CSSProperties\n  propertyStyle?: CSSProperties\n  stringStyle?: CSSProperties\n  style?: CSSProperties\n  tabSpaceStyle?: CSSProperties\n  trueStyle?: CSSProperties\n}\n\ninterface JsonClassName {\n  booleanClassName?: string\n  braceClassName?: string\n  bracketClassName?: string\n  className?: string\n  commaClassName?: string\n  falseClassName?: string\n  nullClassName?: string\n  numberClassName?: string\n  propertyClassName?: string\n  stringClassName?: string\n  tabSpaceClassName?: string\n  trueClassName?: string\n}\n\nexport interface JsonFormatterProps {\n  /**\n   * The JSON data to be formatted. The value could be a stringified string or a valid json object.\n   */\n  json: string | JsonObject\n  /**\n   * Optional class names for different elements of the JSON formatter.\n   */\n  jsonClassName?: JsonClassName\n  /**\n   * Optional inline styles for different elements of the JSON formatter.\n   */\n  jsonStyle?: JsonStyle\n  /**\n   * The width of the tab space. Default is 2.\n   */\n  tabWith?: number\n}\n\n/**\n * A React component that formats and displays JSON data in a styled manner.\n */\nexport default function JsonFormatter({\n  json,\n  jsonClassName: {\n    booleanClassName = '',\n    braceClassName = '',\n    bracketClassName = '',\n    className = '',\n    commaClassName = '',\n    falseClassName = '',\n    nullClassName = '',\n    numberClassName = '',\n    propertyClassName = '',\n    stringClassName = '',\n    tabSpaceClassName = '',\n    trueClassName = ''\n  } = {},\n  jsonStyle: {\n    booleanStyle = {},\n    braceStyle = {},\n    bracketStyle = {},\n    commaStyle = {},\n    falseStyle = {},\n    nullStyle = {},\n    numberStyle = {},\n    propertyStyle = {},\n    stringStyle = {},\n    style = {},\n    tabSpaceStyle = {},\n    trueStyle = {}\n  } = {},\n  tabWith = 2\n}: JsonFormatterProps): JSX.Element {\n  const jsonObject: JsonObject = useMemo(() => {\n    if (typeof json === 'string') {\n      try {\n        return JSON.parse(json)\n      } catch (error) {\n        return json\n      }\n    }\n    return json\n  }, [json])\n\n  const repeatTabSpace = useCallback(\n    (times: number): JSX.Element => (\n      <span className={tabSpaceClassName} style={tabSpaceStyle}>\n        {'\\xa0'.repeat(tabWith * times)}\n      </span>\n    ),\n    [tabSpaceClassName, tabSpaceStyle, tabWith]\n  )\n\n  const categorize = useCallback(\n    (\n      data: JsonObject,\n      tabSpaceRepeatTimes: number\n    ): JSX.Element | JSX.Element[] => {\n      switch (Object.prototype.toString.call(data)) {\n        case '[object Number]': {\n          return (\n            <span className={numberClassName} style={numberStyle}>\n              {data as number}\n            </span>\n          )\n        }\n\n        case '[object String]': {\n          return (\n            <span\n              className={stringClassName}\n              style={stringStyle}\n            >{`\"${data}\"`}</span>\n          )\n        }\n\n        case '[object Boolean]': {\n          const dataJSX = data ? (\n            <span\n              className={`${booleanClassName} ${trueClassName}`}\n              style={{ ...booleanStyle, ...trueStyle }}\n            >\n              true\n            </span>\n          ) : (\n            <span\n              className={`${booleanClassName} ${falseClassName}`}\n              style={{ ...booleanStyle, ...falseStyle }}\n            >\n              false\n            </span>\n          )\n          return dataJSX\n        }\n\n        case '[object Object]': {\n          return (\n            <React.Fragment>\n              <span className={braceClassName} style={braceStyle}>\n                {'{'}\n              </span>\n              <br />\n              {Object.entries(data as Record<string, JsonObject>).map(\n                ([key, value], index, list) => (\n                  <React.Fragment key={index}>\n                    {repeatTabSpace(tabSpaceRepeatTimes + 1)}\n                    <span\n                      className={propertyClassName}\n                      style={propertyStyle}\n                    >{`\"${key}\": `}</span>\n                    {categorize(value, tabSpaceRepeatTimes + 1)}\n                    {index !== list.length - 1 && (\n                      <span className={commaClassName} style={commaStyle}>\n                        ,\n                      </span>\n                    )}\n                    <br />\n                  </React.Fragment>\n                )\n              )}\n              {repeatTabSpace(tabSpaceRepeatTimes)}\n              <span className={braceClassName} style={braceStyle}>\n                {'}'}\n              </span>\n            </React.Fragment>\n          )\n        }\n\n        case '[object Array]': {\n          return (\n            <React.Fragment>\n              <span className={bracketClassName} style={bracketStyle}>\n                [\n              </span>\n              <br />\n              {(data as unknown as JsonObject[]).map((value, index, list) => (\n                <React.Fragment key={index}>\n                  {repeatTabSpace(tabSpaceRepeatTimes + 1)}\n                  {categorize(value, tabSpaceRepeatTimes + 1)}\n                  {index !== list.length - 1 && (\n                    <span className={commaClassName} style={commaStyle}>\n                      ,\n                    </span>\n                  )}\n                  <br />\n                </React.Fragment>\n              ))}\n              {repeatTabSpace(tabSpaceRepeatTimes)}\n              <span className={bracketClassName} style={bracketStyle}>\n                ]\n              </span>\n            </React.Fragment>\n          )\n        }\n\n        case '[object Null]': {\n          return (\n            <span className={nullClassName} style={nullStyle}>\n              null\n            </span>\n          )\n        }\n\n        default:\n          return <span>type error</span>\n      }\n    },\n    [\n      booleanClassName,\n      booleanStyle,\n      braceClassName,\n      braceStyle,\n      bracketClassName,\n      bracketStyle,\n      commaClassName,\n      commaStyle,\n      falseClassName,\n      falseStyle,\n      nullClassName,\n      nullStyle,\n      numberClassName,\n      numberStyle,\n      propertyClassName,\n      propertyStyle,\n      repeatTabSpace,\n      stringClassName,\n      stringStyle,\n      trueClassName,\n      trueStyle\n    ]\n  )\n\n  const result = useMemo(\n    () => categorize(jsonObject, 0),\n    [categorize, jsonObject]\n  )\n\n  return (\n    <div className={className} style={style}>\n      <div>{result}</div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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"}