import { InPageWalletProviderState } from "@toruslabs/base-controllers";
import { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from "@toruslabs/openlogin-jrpc";
import { AddChainMessageParams, BlockParams, EncryptionPublicKeyParams, EthereumTransactionMeta, MessageParams, SwitchChainMessageParams, TransactionParams, TransactionRPCMeta, TypedMessageParams, UserRequestApprovalParams } from "../utils/interfaces";
export interface IProviderHandlers {
    version: string;
    requestAccounts?: (req: JRPCRequest<string[]>) => Promise<string[]>;
    getAccounts: (req: JRPCRequest<string[]>) => Promise<string[]>;
    processTransaction?: (txParams: TransactionParams, req: JRPCRequest<TransactionParams> & UserRequestApprovalParams) => Promise<string>;
    processEthSignMessage?: (msgParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processTypedMessage?: (msgParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processTypedMessageV3?: (msgParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processTypedMessageV4?: (msgParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processPersonalMessage?: (msgParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processEncryptionPublicKey?: (msgParams: EncryptionPublicKeyParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processDecryptMessage?: (msgParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processSwitchEthereumChain?: (msgParams: SwitchChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    processAddEthereumChain?: (msgParams: AddChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;
    getPendingNonce?: (nonceParams: {
        address: string;
        blockReference: string;
    }, req: JRPCRequest<{
        address: string;
        blockReference: string;
    }>) => Promise<string>;
    getPendingTransactionByHash?: (hash: string, req: JRPCRequest<string>) => Promise<EthereumTransactionMeta>;
    getProviderState: (req: JRPCRequest<[]>, res: JRPCResponse<InPageWalletProviderState>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => void;
}
export declare function createGetAccountsMiddleware({ getAccounts }: {
    getAccounts: IProviderHandlers["getAccounts"];
}): JRPCMiddleware<never, string[]>;
export declare function createProcessTransactionMiddleware({ processTransaction, }: {
    processTransaction: IProviderHandlers["processTransaction"];
}): JRPCMiddleware<TransactionParams, string>;
export declare function createProcessEthSignMessage({ processEthSignMessage, }: {
    processEthSignMessage: IProviderHandlers["processEthSignMessage"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessTypedMessage({ processTypedMessage, }: {
    processTypedMessage: IProviderHandlers["processTypedMessage"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessTypedMessageV3({ processTypedMessageV3, }: {
    processTypedMessageV3: IProviderHandlers["processTypedMessageV3"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessTypedMessageV4({ processTypedMessageV4, }: {
    processTypedMessageV4: IProviderHandlers["processTypedMessageV4"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessPersonalMessage({ processPersonalMessage, }: {
    processPersonalMessage: IProviderHandlers["processPersonalMessage"];
}): JRPCMiddleware<unknown, string>;
export declare function createPendingNonceMiddleware({ getPendingNonce, }: {
    getPendingNonce: IProviderHandlers["getPendingNonce"];
}): JRPCMiddleware<{
    address: string;
    blockReference: BlockParams;
}, string>;
export declare function formatTxMetaForRpcResult(txMeta: EthereumTransactionMeta): TransactionRPCMeta;
export declare function createPendingTxMiddleware({ getPendingTransactionByHash, }: {
    getPendingTransactionByHash: IProviderHandlers["getPendingTransactionByHash"];
}): JRPCMiddleware<string, TransactionRPCMeta>;
export declare function createProcessEncryptionPublicKeyMiddleware({ processEncryptionPublicKey, }: {
    processEncryptionPublicKey: IProviderHandlers["processEncryptionPublicKey"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessDecryptMessageMiddleware({ processDecryptMessage, }: {
    processDecryptMessage: IProviderHandlers["processDecryptMessage"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessSwitchEthereumChain({ processSwitchEthereumChain, }: {
    processSwitchEthereumChain: IProviderHandlers["processSwitchEthereumChain"];
}): JRPCMiddleware<unknown, string>;
export declare function createProcessAddEthereumChain({ processAddEthereumChain, }: {
    processAddEthereumChain: IProviderHandlers["processAddEthereumChain"];
}): JRPCMiddleware<unknown, string>;
export declare function createRequestAccountsMiddleware({ requestAccounts, }: {
    requestAccounts: IProviderHandlers["requestAccounts"];
}): JRPCMiddleware<string[], unknown>;
export declare function createEthereumMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown>;
