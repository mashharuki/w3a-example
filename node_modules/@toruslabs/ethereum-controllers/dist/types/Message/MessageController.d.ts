import { BaseConfig } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@toruslabs/openlogin-jrpc";
import KeyringController from "../Keyring/KeyringController";
import NetworkController from "../Network/NetworkController";
import { Message, MessageParams, UserRequestApprovalParams } from "../utils/interfaces";
import AbstractMessageController, { MessageControllerState } from "./AbstractMessageController";
export declare class MessageController extends AbstractMessageController<Message, MessageParams> {
    name: string;
    protected signMessage: KeyringController["signMessage"];
    constructor({ config, state, signMessage, getNetworkIdentifier, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<Message>>;
        signMessage: KeyringController["signMessage"];
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    });
    processSignMessage(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    addUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    prepMessageForSigning(messageParams: MessageParams): Promise<MessageParams>;
}
