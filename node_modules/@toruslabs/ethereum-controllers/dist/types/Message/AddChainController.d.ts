import { BaseConfig } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@toruslabs/openlogin-jrpc";
import NetworkController from "../Network/NetworkController";
import PreferencesController from "../Preferences/PreferencesController";
import { AddChainMessage, AddChainMessageParams, UserRequestApprovalParams } from "../utils/interfaces";
import AbstractMessageController, { MessageControllerState } from "./AbstractMessageController";
export declare class AddChainController extends AbstractMessageController<AddChainMessage, AddChainMessageParams> {
    name: string;
    protected addChain: PreferencesController["addChain"];
    constructor({ config, state, getNetworkIdentifier, addChain, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<AddChainMessage>>;
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
        addChain: PreferencesController["addChain"];
    });
    processAddChain(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: AddChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    addUnapprovedMessage(messageParams: AddChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    prepMessageForSigning(messageParams: AddChainMessageParams): Promise<AddChainMessageParams>;
}
