import { BaseConfig } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@toruslabs/openlogin-jrpc";
import KeyringController from "../Keyring/KeyringController";
import NetworkController from "../Network/NetworkController";
import { EncryptionPublicKey, EncryptionPublicKeyParams, UserRequestApprovalParams } from "../utils/interfaces";
import AbstractMessageController, { MessageControllerState } from "./AbstractMessageController";
export declare class EncryptionPublicKeyController extends AbstractMessageController<EncryptionPublicKey, EncryptionPublicKeyParams> {
    name: string;
    protected signEncryptionPublicKey: KeyringController["signEncryptionPublicKey"];
    constructor({ config, state, signEncryptionPublicKey, getNetworkIdentifier, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<EncryptionPublicKey>>;
        signEncryptionPublicKey: KeyringController["signEncryptionPublicKey"];
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    });
    processGetEncryptionPublicKey(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: EncryptionPublicKeyParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    addUnapprovedMessage(messageParams: EncryptionPublicKeyParams, req?: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    prepMessageForSigning(messageParams: EncryptionPublicKeyParams): Promise<EncryptionPublicKeyParams>;
}
