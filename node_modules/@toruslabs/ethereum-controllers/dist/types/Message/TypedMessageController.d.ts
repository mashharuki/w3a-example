import { SignTypedDataVersion } from "@metamask/eth-sig-util";
import { BaseConfig } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@toruslabs/openlogin-jrpc";
import KeyringController from "../Keyring/KeyringController";
import NetworkController from "../Network/NetworkController";
import { TypedMessage, TypedMessageParams, UserRequestApprovalParams } from "../utils/interfaces";
import AbstractMessageController, { MessageControllerState } from "./AbstractMessageController";
export declare class TypedMessageController extends AbstractMessageController<TypedMessage, TypedMessageParams> {
    name: string;
    protected signTypedData: KeyringController["signTypedData"];
    constructor({ config, state, signTypedData, getNetworkIdentifier, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<TypedMessage>>;
        signTypedData: KeyringController["signTypedData"];
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    });
    processSignTypedMessage(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams, version: SignTypedDataVersion): Promise<string>;
    addUnapprovedMessage(messageParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams, version: SignTypedDataVersion): Promise<string>;
    prepMessageForSigning(messageParams: TypedMessageParams): Promise<TypedMessageParams>;
}
