import { type SignTypedDataVersion } from "@metamask/eth-sig-util";
import { BaseConfig, BaseController, BaseState } from "@toruslabs/base-controllers";
import { JRPCRequest, Json } from "@toruslabs/openlogin-jrpc";
import NetworkController from "../Network/NetworkController";
import { AbstractMessage, BaseRequestParams, MessageStatusType, UserRequestApprovalParams } from "../utils/interfaces";
export interface MessageControllerState<M extends AbstractMessage> extends BaseState {
    unapprovedMessages: Record<string, M>;
    unapprovedMessagesCount: number;
}
export default abstract class AbstractMessageController<M extends AbstractMessage, P extends BaseRequestParams> extends BaseController<BaseConfig, MessageControllerState<M>> {
    protected messages: M[];
    protected getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    /**
     * Controller in charge of managing - storing, adding, removing, updating - Messages.
     *
     */
    constructor({ config, state, getNetworkIdentifier, }: {
        config?: Partial<BaseConfig>;
        state?: Partial<MessageControllerState<M>>;
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    });
    getMessage(messageId: string): M;
    getAllMessages(): M[];
    setMetadata(messageId: string, metadata: Json): void;
    getUnapprovedMessages(): {
        [key: string]: M;
    };
    addMessage(message: M): Promise<void>;
    approveMessage(messageId: string, messageParams: P): Promise<P>;
    setMessageStatus(messageId: string, status: MessageStatusType): void;
    waitForFinishStatus(msgParams: P, messageName: string): Promise<string>;
    protected updateMessage(message: M): void;
    protected saveMessageList(): void;
    abstract prepMessageForSigning(messageParams: P): Promise<P>;
    abstract addUnapprovedMessage(messageParams: P, request: JRPCRequest<P> & UserRequestApprovalParams, version?: SignTypedDataVersion): Promise<string>;
}
