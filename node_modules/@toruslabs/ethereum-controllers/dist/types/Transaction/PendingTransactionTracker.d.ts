import { ITransactionController } from "@toruslabs/base-controllers";
import { SafeEventEmitter, SafeEventEmitterProvider } from "@toruslabs/openlogin-jrpc";
import { EthereumBlock, EthereumTransactionMeta } from "../utils/interfaces";
import NonceTracker from "./NonceTracker";
import TransactionStateManager from "./TransactionStateManager";
export default class PendingTransactionTracker extends SafeEventEmitter {
    DROPPED_BUFFER_COUNT: number;
    private nonceTracker;
    private provider;
    private approveTransaction;
    private droppedBlocksBufferByHash;
    private getConfirmedTransactions;
    private getPendingTransactions;
    private publishTransaction;
    constructor({ provider, nonceTracker, approveTransaction, publishTransaction, getPendingTransactions, getConfirmedTransactions, }: {
        provider: SafeEventEmitterProvider;
        nonceTracker: NonceTracker;
        approveTransaction: ITransactionController<EthereumTransactionMeta>["approveTransaction"];
        publishTransaction: (rawTx: string) => Promise<string>;
        getPendingTransactions: TransactionStateManager["getPendingTransactions"];
        getConfirmedTransactions: TransactionStateManager["getConfirmedTransactions"];
    });
    /**
      checks the network for signed txs and releases the nonce global lock if it is
    */
    updatePendingTxs(): Promise<void>;
    resubmitPendingTxs(block: EthereumBlock): Promise<void>;
    _resubmitTx(txMeta: EthereumTransactionMeta, latestBlockNumber?: string): Promise<string | void>;
    _checkPendingTx(foundTx: EthereumTransactionMeta): Promise<void>;
    _checkIfTxWasDropped(txMeta: EthereumTransactionMeta): Promise<boolean>;
    _checkIfNonceIsTaken(txMeta: EthereumTransactionMeta): boolean;
}
