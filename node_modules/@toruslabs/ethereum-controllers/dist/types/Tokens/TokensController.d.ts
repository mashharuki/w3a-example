import { BaseController, PreferencesState } from "@toruslabs/base-controllers";
import { SafeEventEmitterProvider } from "@toruslabs/openlogin-jrpc";
import NetworkController from "../Network/NetworkController";
import PreferencesController from "../Preferences/PreferencesController";
import { CustomTokenInfo, EthereumNetworkState, ExtendedAddressPreferences } from "../utils/interfaces";
import { TokensControllerConfig, TokensControllerState } from "./ITokensController";
export interface ITokensControllerOptions {
    config?: Partial<TokensControllerConfig>;
    state?: Partial<TokensControllerState>;
    provider: SafeEventEmitterProvider;
    getCustomTokens?: PreferencesController["getCustomTokens"];
    getEtherScanTokens: PreferencesController["getEtherScanTokens"];
    getProviderConfig: NetworkController["getProviderConfig"];
    onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;
    onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;
}
export declare class TokensController extends BaseController<TokensControllerConfig, TokensControllerState> {
    name: string;
    private provider;
    private ethersProvider;
    private _timer;
    private getProviderConfig;
    private getCustomTokens;
    private getEtherScanTokens;
    constructor({ config, state, provider, getCustomTokens, getEtherScanTokens, getProviderConfig, onPreferencesStateChange, onNetworkStateChange, }: ITokensControllerOptions);
    get userSelectedAddress(): string;
    get userTokens(): CustomTokenInfo[];
    get interval(): number;
    set interval(interval: number);
    startTokenDetection(selectedAddress: string): void;
    /**
     * Restart token detection polling period and call detectNewTokens
     * in case of address change or user session initialization.
     *
     */
    restartTokenDetection(): void;
    detectNewTokens(): void;
    refreshTokenBalances(): Promise<void>;
    getTokenBalancesUsingHandler(customTokens: CustomTokenInfo[]): Promise<void>;
}
