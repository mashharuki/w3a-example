import { EthereumProviderConfig } from "./interfaces";
export declare const LOCALHOST = "localhost";
export declare const CONTRACT_TYPE_ETH = "eth";
export declare const CONTRACT_TYPE_ERC20 = "erc20";
export declare const CONTRACT_TYPE_ERC721 = "erc721";
export declare const CONTRACT_TYPE_ERC1155 = "erc1155";
export declare const ERC1155_INTERFACE_ID = "0xd9b67a26";
export declare const ERC721_INTERFACE_ID = "0x80ac58cd";
export declare const ERC721_METADATA_INTERFACE_ID = "0x5b5e139f";
export declare const ERC721_ENUMERABLE_INTERFACE_ID = "0x780e9d63";
export declare const MAINNET_CHAIN_ID = "0x1";
export declare const POLYGON_CHAIN_ID = "0x89";
export declare const BSC_MAINNET_CHAIN_ID = "0x38";
export declare const AVALANCHE_MAINNET_CHAIN_ID = "0xa86a";
export declare const XDAI_CHAIN_ID = "0x64";
export declare const ARBITRUM_MAINNET_CHAIN_ID = "0xa4b1";
export declare const OPTIMISM_MAINNET_CHAIN_ID = "0xa";
export declare const CELO_MAINNET_CHAIN_ID = "0xa4ec";
export declare const BASE_CHAIN_ID = "0x2105";
export declare const SEPOLIA_CHAIN_ID = "0xaa36a7";
export declare const POLYGON_AMOY_CHAIN_ID = "0x13882";
export declare const BSC_TESTNET_CHAIN_ID = "0x61";
export declare const AVALANCHE_TESTNET_CHAIN_ID = "0xa869";
export declare const ARBITRUM_TESTNET_CHAIN_ID = "0x66eee";
export declare const OPTIMISM_TESTNET_CHAIN_ID = "0xaa37dc";
export declare const BASE_TESTNET_CHAIN_ID = "0x14a34";
export declare const SUPPORTED_NETWORKS: Record<string, EthereumProviderConfig>;
export declare const METHOD_TYPES: {
    readonly GET_ACCOUNTS: "eth_accounts";
    readonly ETH_TRANSACTION: "eth_sendTransaction";
    readonly ETH_REQUEST_ACCOUNTS: "eth_requestAccounts";
    readonly ETH_SEND_RAW_TRANSACTION: "eth_sendRawTransaction";
    readonly ETH_SIGN: "eth_sign";
    readonly ETH_SIGN_TYPED_DATA: "eth_signTypedData";
    readonly ETH_SIGN_TYPED_DATA_V3: "eth_signTypedData_v3";
    readonly ETH_SIGN_TYPED_DATA_V4: "eth_signTypedData_v4";
    readonly PERSONAL_SIGN: "personal_sign";
    readonly ETH_GET_TRANSACTION_COUNT: "eth_getTransactionCount";
    readonly ETH_GET_TRANSACTION_BY_HASH: "eth_getTransactionByHash";
    readonly ETH_GET_ENCRYPTION_PUBLIC_KEY: "eth_getEncryptionPublicKey";
    readonly ETH_DECRYPT: "eth_decrypt";
    readonly ETH_GET_TRANSACTION_RECEIPT: "eth_getTransactionReceipt";
    readonly WATCH_ASSET: "wallet_watchAsset";
    readonly ETH_GET_BLOCK_BY_HASH: "eth_getBlockByHash";
    readonly ETH_GET_CODE: "eth_getCode";
    readonly ETH_GET_GAS_PRICE: "eth_gasPrice";
    readonly SWITCH_CHAIN: "wallet_switchEthereumChain";
    readonly ADD_CHAIN: "wallet_addEthereumChain";
};
export declare const TRANSACTION_ENVELOPE_TYPES: {
    readonly LEGACY: "0x0";
    readonly ACCESS_LIST: "0x1";
    readonly FEE_MARKET: "0x2";
};
export declare const GAS_ESTIMATE_TYPES: {
    readonly FEE_MARKET: "fee-market";
    readonly LEGACY: "legacy";
    readonly ETH_GASPRICE: "eth_gasPrice";
    readonly NONE: "none";
};
export declare const CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP: Record<string, number>;
export declare const OLD_ERC721_LIST: Record<string, {
    name?: string;
    logo?: string;
    erc20?: boolean;
    symbol?: string;
    decimals?: number;
}>;
export declare const TEST_CHAINS: string[];
export declare const ETHERSCAN_SUPPORTED_CHAINS: string[];
export declare const SIMPLEHASH_SUPPORTED_CHAINS: string[];
export declare const COINGECKO_SUPPORTED_CURRENCIES: Set<string>;
export declare const COINGECKO_PLATFORMS_CHAIN_CODE_MAP: Record<string, {
    platform: string;
    currency: string;
}>;
export declare const MessageStatus: {
    readonly UNAPPROVED: "unapproved";
    readonly SIGNED: "signed";
    readonly PENDING: "pending";
    readonly APPROVED: "approved";
    readonly REJECTED: "rejected";
    readonly FAILED: "failed";
};
export declare const MESSAGE_EVENTS: {
    UNAPPROVED_MESSAGE: string;
};
