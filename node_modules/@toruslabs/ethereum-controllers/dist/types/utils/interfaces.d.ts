import { type AccessList } from "@ethereumjs/common";
import { SignTypedDataVersion } from "@metamask/eth-sig-util";
import { AddressPreferences, BaseBlockTrackerState, NetworkConfig, NetworkState, PaymentTransaction, PollingBlockTrackerConfig, PopupWhitelabelData, ProviderConfig, TRANSACTION_TYPE, TransactionMeta, TransactionStatus, User } from "@toruslabs/base-controllers";
import { Json } from "@toruslabs/openlogin-jrpc";
import { MutexInterface } from "async-mutex";
import { MessageStatus, METHOD_TYPES, TRANSACTION_ENVELOPE_TYPES } from "./constants";
export type CustomTokenInfo = {
    tokenAddress: string;
    name: string;
    chainId: string;
    erc20: boolean;
    symbol: string;
    decimals: string;
    balance?: string;
    customTokenId?: string;
    isEtherScan?: boolean;
    logo?: string;
};
export type CustomNftItemInfo = {
    image: string;
    name: string;
    tokenBalance: string;
    description: string;
    tokenId: string;
    video?: string;
    decimals?: string;
    customNftId?: string;
};
export type NftStandardType = "erc721" | "erc1155";
export type CustomNftInfo = {
    contractAddress: string;
    contractName: string;
    contractSymbol: string;
    contractImage?: string;
    contractSupply?: string;
    contractFallbackLogo?: string;
    nftStandard: NftStandardType;
    contractDescription?: string;
    chainId: string;
    assets: CustomNftItemInfo[];
};
export interface EthereumBlock {
    blockHash: string;
    idempotencyKey: string;
    timestamp: string;
    baseFeePerGas: string;
    gasLimit: string;
}
export interface UserRequestApprovalParams {
    windowId?: string;
    origin?: string;
}
export interface BaseRequestParams {
    /**
     * Unique id for each request
     */
    id?: string;
    /**
     * Address to send this transaction from.
     */
    from: string;
    /**
     * Domain requested from
     */
    origin?: string;
}
export interface MessageParams extends BaseRequestParams {
    data: string;
}
export type MessageStatusType = (typeof MessageStatus)[keyof typeof MessageStatus];
export interface AbstractMessage {
    id: string;
    time: number;
    status: MessageStatusType;
    /**
     * JRPC method for which sig request is made
     */
    type: string;
    rawSig?: string;
    metadata?: Json;
    error?: string;
}
export interface Message extends AbstractMessage {
    messageParams: MessageParams;
}
export type SignTypedDataMessageV3V4 = {
    types: Record<string, unknown>;
    domain: Record<string, unknown>;
    primaryType: string;
    message: unknown;
};
export interface SwitchChainMessageParams extends BaseRequestParams {
    chainId: string;
    displayName?: string;
}
export interface SwitchChainMessage extends AbstractMessage {
    messageParams: SwitchChainMessageParams;
}
export interface AddChainMessageParams extends BaseRequestParams {
    chainId: string;
    chainName: string;
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: number;
    };
    rpcUrls: string[];
    blockExplorerUrls?: string[];
}
export interface AddChainMessage extends AbstractMessage {
    messageParams: AddChainMessageParams;
}
export interface TypedMessageParams extends BaseRequestParams {
    data: Record<string, unknown>[] | string | SignTypedDataMessageV3V4;
    version?: SignTypedDataVersion;
}
export interface TypedMessage extends AbstractMessage {
    messageParams: TypedMessageParams;
}
export type TRANSACTION_ENVELOPE_TYPES_TYPE = (typeof TRANSACTION_ENVELOPE_TYPES)[keyof typeof TRANSACTION_ENVELOPE_TYPES];
export interface TransactionParams extends BaseRequestParams {
    /**
     * Network ID as per EIP-155.
     */
    chainId?: string;
    /**
     * Data to pass with this transaction.
     */
    data?: string;
    /**
     * Error message for gas estimation failure.
     */
    estimateGasError?: string;
    /**
     * Estimated base fee for this transaction.
     */
    estimatedBaseFee?: string;
    /**
     * Gas to send with this transaction.
     */
    gas?: string;
    /**
     * Price of gas with this transaction.
     */
    gasPrice?: string;
    /**
     * Gas used in the transaction.
     */
    gasUsed?: string;
    /**
     * Maximum fee per gas for this transaction.
     */
    maxFeePerGas?: string;
    /**
     * Maximum priority fee per gas for this transaction.
     */
    maxPriorityFeePerGas?: string;
    /**
     * Unique number to prevent replay attacks.
     */
    nonce?: string;
    /**
     * Address to send this transaction to.
     */
    to?: string;
    /**
     * Value associated with this transaction.
     */
    value?: string;
    /**
     * EIP 2930
     */
    accessList?: AccessList;
    /**
     * Custom Nonce passed by the user
     */
    customNonceValue?: string;
    /**
     * Transaction envelope type
     */
    type?: TRANSACTION_ENVELOPE_TYPES_TYPE;
    /**
     * Max Gas to send with this transaction.
     */
    gasLimit?: string;
}
export type Nonce = {
    name: string;
    nonce: number;
    details: {
        startPoint?: number;
        highest?: number;
        block?: EthereumBlock;
        baseCount?: number;
    };
};
export type NonceDetails = {
    params: {
        highestLocallyConfirmed: number;
        nextNetworkNonce: number;
        highestSuggested: number;
    };
    local: Nonce;
    network: Nonce;
};
/**
 * Ref - https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt
 */
export interface TransactionReceipt {
    transactionHash: string;
    transactionIndex: string;
    blockNumber: string;
    blockHash: string;
    from: string;
    to: string | null;
    cumulativeGasUsed: string;
    effectiveGasPrice: string;
    gasUsed: string;
    contractAddress: string | null;
    logs: unknown[];
    logsBloom: string;
    type: TRANSACTION_ENVELOPE_TYPES_TYPE;
    root?: string;
    status?: "0x0" | "0x1";
}
export type BlockTag = "earliest" | "finalized" | "safe" | "latest" | "pending";
export type BlockParams = string | BlockTag;
export interface TransactionRPCMeta {
    v: string;
    r: string;
    s: string;
    to: string | null;
    gas: string;
    from: string;
    hash: string;
    nonce: string;
    input: string;
    value: string;
    accessList?: string[];
    blockHash: string | null;
    blockNumber: string | null;
    transactionIndex: string | null;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
    gasPrice?: string;
    type: TRANSACTION_ENVELOPE_TYPES_TYPE;
    chainID?: string;
}
export type PollingBlockTrackerState = BaseBlockTrackerState<EthereumBlock>;
export interface EthereumProviderConfig extends ProviderConfig {
    isErc20?: boolean;
    tokenAddress?: string;
}
export interface EthereumNetworkState extends NetworkState {
    providerConfig: EthereumProviderConfig;
}
export interface EthereumNetworkConfig extends NetworkConfig, Partial<PollingBlockTrackerConfig> {
    providerConfig: EthereumProviderConfig;
}
export type CustomNetworkPayload = Partial<EthereumProviderConfig> & Pick<EthereumProviderConfig, "chainId" | "displayName" | "rpcTarget" | "ticker">;
export interface CustomNetworks {
    id: number;
    created_at: Date;
    updated_at: Date;
    network_name: string;
    public_address: string;
    chain_id: string;
    rpc_url: string;
    symbol?: string;
    symbol_name?: string;
    decimals?: string;
    logo?: string;
    block_explorer_url?: string;
    is_testnet?: boolean;
}
export interface EthereumUser extends User {
    customNetworks: CustomNetworks[];
}
export interface ContractParams {
    erc20?: boolean;
    erc721?: boolean;
    erc1155?: boolean;
    isSpecial?: boolean;
    symbol?: string;
    logo?: string;
    decimals?: number;
}
export interface DappSuggestedGasFees {
    gasPrice?: string;
    maxPriorityFeePerGas?: string;
    maxFeePerGas?: string;
    gas?: string;
}
export interface EthereumTransactionMeta extends TransactionMeta<TransactionParams> {
    r?: string;
    s?: string;
    v?: string;
    type: string;
    txReceipt?: TransactionReceipt;
    history: Record<string, unknown>[];
    accessList?: string[];
    firstRetryBlockNumber?: string;
    retryCount?: number;
    simulationFails?: Record<string, unknown>;
    loadingDefaults?: boolean;
    transactionCategory?: TRANSACTION_TYPE;
    contractType?: string;
    nonceDetails?: NonceDetails;
    methodParams?: unknown[];
    dappSuggestedGasFees?: DappSuggestedGasFees;
}
export interface TransactionPayload {
    created_at: Date;
    from: string;
    to: string;
    total_amount: string;
    currency_amount: string;
    selected_currency: string;
    status?: TransactionStatus;
    chain_id: string;
    transaction_hash: string;
    transaction_category: string;
    gas: string;
    gasPrice: string;
    nonce: string;
    type: string;
    type_name: string;
    type_image_link: string;
    symbol: string;
    is_cancel: boolean;
    contract_address?: string;
    from_aa_address?: string;
    isEtherscan?: boolean;
    token_id?: string;
    input?: string;
    etherscanLink?: string;
}
export interface FetchedTransaction extends TransactionPayload {
    id: string;
}
export interface FetchCommonTransaction extends PaymentTransaction {
    etherscanLink?: string | null;
}
export interface FormattedTransactionActivity {
    id: string;
    date: string;
    from: string;
    from_aa_address?: string;
    slicedFrom: string;
    to: string;
    slicedTo: string;
    action: string;
    totalAmount: string;
    totalAmountString: string;
    currencyAmount: string;
    currencyAmountString: string;
    amount: string;
    status: TransactionStatus;
    etherscanLink: string;
    ethRate: string;
    currencyUsed: string;
    chainId: string;
    type: string;
    type_name: string;
    type_image_link: string;
    transaction_hash: string;
    isEtherscan?: boolean;
    transaction_category: string;
    input?: string;
    contract_address?: string;
    token_id?: string;
    nonce: string;
    is_cancel: boolean;
    gas: string;
    gasPrice: string;
    hasCancel?: boolean;
    cancelDateInitiated?: string;
    cancelGas?: string;
    cancelGasPrice?: string;
}
export interface ExtendedAddressPreferences extends AddressPreferences {
    fetchedPastTx?: FetchedTransaction[];
    formattedPastTransactions?: FormattedTransactionActivity[];
    paymentTx: FetchCommonTransaction[];
    customNetworks: CustomNetworks[];
    etherscanTransactions?: FormattedTransactionActivity[];
}
export interface ProviderChangeChannelEventData {
    newNetwork: EthereumProviderConfig;
    whitelabelData: PopupWhitelabelData;
    origin: string;
    currentChainId: string;
}
export interface NonceLockRes {
    nextNonce: number;
    nonceDetails: NonceDetails;
    releaseLock: MutexInterface.Releaser;
}
export type METHOD_TYPES_TYPE = (typeof METHOD_TYPES)[keyof typeof METHOD_TYPES];
export interface EncryptionPublicKeyParams extends BaseRequestParams {
    data: string;
}
export interface EncryptionPublicKey extends AbstractMessage {
    messageParams: EncryptionPublicKeyParams;
}
export interface DecryptMessageParams extends BaseRequestParams {
    data: string;
}
export interface DecryptMessage extends AbstractMessage {
    messageParams: DecryptMessageParams;
}
export interface EtherscanTransaction {
    blockNumber: string;
    timeStamp: string;
    hash: string;
    nonce: string;
    blockHash: string;
    transactionIndex: string;
    from: string;
    to: string;
    value: string;
    gas: string;
    gasPrice: string;
    isError: string;
    txreceipt_status: string;
    input: string;
    contractAddress: string;
    cumulativeGasUsed: string;
    gasUsed: string;
    confirmations: string;
    methodId: string;
    functionName: string;
    transaction_category: string;
    type_name: string;
    type: string;
    type_image_link: string;
    chainId: string;
    tokenSymbol: string;
    tokenName: string;
    tokenID: string;
    tokenValue: string;
    tokenDecimal: string;
}
