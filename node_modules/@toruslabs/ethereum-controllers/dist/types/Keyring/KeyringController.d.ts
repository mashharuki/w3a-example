import { EthEncryptedData, MessageTypes, SignTypedDataVersion, TypedDataV1, TypedMessage } from "@metamask/eth-sig-util";
import { BaseConfig, BaseKeyringController, IKeyringController, KeyringControllerState } from "@toruslabs/base-controllers";
export default class KeyringController extends BaseKeyringController<Partial<BaseConfig>, KeyringControllerState> implements IKeyringController {
    constructor({ config, state }: {
        config: Partial<BaseConfig>;
        state: Partial<KeyringControllerState>;
    });
    signTransaction<T, U>(tx: T, address: string): Promise<U>;
    getAccounts(): string[];
    importAccount(accountPrivateKey: string): string;
    removeAccount(address: string): void;
    getBufferPrivateKey(privateKey: string): Buffer;
    signMessage(data: string, address: string): Promise<string>;
    signPersonalMessage(data: string, address: string): Promise<string>;
    signTypedData<V extends SignTypedDataVersion, T extends MessageTypes>(typedData: V extends "V1" ? TypedDataV1 : TypedMessage<T>, address: string, version: V): Promise<string>;
    signEncryptionPublicKey(address: string): string;
    decryptMessage(data: EthEncryptedData, address: string): string;
    private _getWalletForAccount;
}
