import {
  BIGINT_0,
  TypeOutput,
  bytesToHex,
  concatBytes,
  hexToBytes,
  intToBytes,
  intToHex,
  isHexString,
  stripHexPrefix,
  toType
} from "./chunk-K6CC7U6K.js";
import {
  require_events
} from "./chunk-GJBZJ4UL.js";
import {
  __toESM
} from "./chunk-256EKJAK.js";

// node_modules/@ethereumjs/common/dist/esm/common.js
var import_events = __toESM(require_events(), 1);

// node_modules/@ethereumjs/common/dist/esm/chains.js
var chains = {
  mainnet: {
    name: "mainnet",
    chainId: 1,
    networkId: 1,
    defaultHardfork: "shanghai",
    consensus: {
      type: "pow",
      algorithm: "ethash",
      ethash: {}
    },
    comment: "The Ethereum main chain",
    url: "https://ethstats.net/",
    genesis: {
      gasLimit: 5e3,
      difficulty: 17179869184,
      nonce: "0x0000000000000042",
      extraData: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"
    },
    depositContractAddress: "0x00000000219ab540356cBB839Cbe05303d7705Fa",
    hardforks: [
      {
        name: "chainstart",
        block: 0,
        forkHash: "0xfc64ec04"
      },
      {
        name: "homestead",
        block: 115e4,
        forkHash: "0x97c2c34c"
      },
      {
        name: "dao",
        block: 192e4,
        forkHash: "0x91d1f948"
      },
      {
        name: "tangerineWhistle",
        block: 2463e3,
        forkHash: "0x7a64da13"
      },
      {
        name: "spuriousDragon",
        block: 2675e3,
        forkHash: "0x3edd5b10"
      },
      {
        name: "byzantium",
        block: 437e4,
        forkHash: "0xa00bc324"
      },
      {
        name: "constantinople",
        block: 728e4,
        forkHash: "0x668db0af"
      },
      {
        name: "petersburg",
        block: 728e4,
        forkHash: "0x668db0af"
      },
      {
        name: "istanbul",
        block: 9069e3,
        forkHash: "0x879d6e30"
      },
      {
        name: "muirGlacier",
        block: 92e5,
        forkHash: "0xe029e991"
      },
      {
        name: "berlin",
        block: 12244e3,
        forkHash: "0x0eb440f6"
      },
      {
        name: "london",
        block: 12965e3,
        forkHash: "0xb715077d"
      },
      {
        name: "arrowGlacier",
        block: 13773e3,
        forkHash: "0x20c327fc"
      },
      {
        name: "grayGlacier",
        block: 1505e4,
        forkHash: "0xf0afd0e3"
      },
      {
        // The forkHash will remain same as mergeForkIdTransition is post merge
        // terminal block: https://etherscan.io/block/15537393
        name: "paris",
        ttd: "58750000000000000000000",
        block: 15537394,
        forkHash: "0xf0afd0e3"
      },
      {
        name: "mergeForkIdTransition",
        block: null,
        forkHash: null
      },
      {
        name: "shanghai",
        block: null,
        timestamp: "1681338455",
        forkHash: "0xdce96c2d"
      },
      {
        name: "cancun",
        block: null,
        timestamp: "1710338135",
        forkHash: "0x9f3d2254"
      },
      {
        name: "prague",
        block: null
      }
    ],
    bootstrapNodes: [
      {
        ip: "18.138.108.67",
        port: 30303,
        id: "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
        location: "ap-southeast-1-001",
        comment: "bootnode-aws-ap-southeast-1-001"
      },
      {
        ip: "3.209.45.79",
        port: 30303,
        id: "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
        location: "us-east-1-001",
        comment: "bootnode-aws-us-east-1-001"
      },
      {
        ip: "65.108.70.101",
        port: 30303,
        id: "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
        location: "eu-west-1-001",
        comment: "bootnode-hetzner-hel"
      },
      {
        ip: "157.90.35.166",
        port: 30303,
        id: "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
        location: "eu-central-1-001",
        comment: "bootnode-hetzner-fsn"
      }
    ],
    dnsNetworks: [
      "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
    ]
  },
  goerli: {
    name: "goerli",
    chainId: 5,
    networkId: 5,
    defaultHardfork: "shanghai",
    consensus: {
      type: "poa",
      algorithm: "clique",
      clique: {
        period: 15,
        epoch: 3e4
      }
    },
    comment: "Cross-client PoA test network",
    url: "https://github.com/goerli/testnet",
    genesis: {
      timestamp: "0x5c51a607",
      gasLimit: 10485760,
      difficulty: 1,
      nonce: "0x0000000000000000",
      extraData: "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    hardforks: [
      {
        name: "chainstart",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "homestead",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "tangerineWhistle",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "spuriousDragon",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "byzantium",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "constantinople",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "petersburg",
        block: 0,
        forkHash: "0xa3f5ab08"
      },
      {
        name: "istanbul",
        block: 1561651,
        forkHash: "0xc25efa5c"
      },
      {
        name: "berlin",
        block: 4460644,
        forkHash: "0x757a1c47"
      },
      {
        name: "london",
        block: 5062605,
        forkHash: "0xb8c6299d"
      },
      {
        // The forkHash will remain same as mergeForkIdTransition is post merge,
        // terminal block: https://goerli.etherscan.io/block/7382818
        name: "paris",
        ttd: "10790000",
        block: 7382819,
        forkHash: "0xb8c6299d"
      },
      {
        name: "mergeForkIdTransition",
        block: null,
        forkHash: null
      },
      {
        name: "shanghai",
        block: null,
        timestamp: "1678832736",
        forkHash: "0xf9843abf"
      },
      {
        name: "cancun",
        block: null,
        timestamp: "1705473120",
        forkHash: "0x70cc14e2"
      }
    ],
    bootstrapNodes: [
      {
        ip: "51.141.78.53",
        port: 30303,
        id: "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
        location: "",
        comment: "Upstream bootnode 1"
      },
      {
        ip: "13.93.54.137",
        port: 30303,
        id: "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
        location: "",
        comment: "Upstream bootnode 2"
      },
      {
        ip: "94.237.54.114",
        port: 30313,
        id: "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
        location: "",
        comment: "Upstream bootnode 3"
      },
      {
        ip: "18.218.250.66",
        port: 30313,
        id: "b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",
        location: "",
        comment: "Upstream bootnode 4"
      },
      {
        ip: "3.11.147.67",
        port: 30303,
        id: "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
        location: "",
        comment: "Ethereum Foundation bootnode"
      },
      {
        ip: "51.15.116.226",
        port: 30303,
        id: "a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",
        location: "",
        comment: "Goerli Initiative bootnode"
      },
      {
        ip: "51.15.119.157",
        port: 30303,
        id: "807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",
        location: "",
        comment: "Goerli Initiative bootnode"
      },
      {
        ip: "51.15.119.157",
        port: 40303,
        id: "a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",
        location: "",
        comment: "Goerli Initiative bootnode"
      }
    ],
    dnsNetworks: [
      "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
    ]
  },
  sepolia: {
    name: "sepolia",
    chainId: 11155111,
    networkId: 11155111,
    defaultHardfork: "shanghai",
    consensus: {
      type: "pow",
      algorithm: "ethash",
      ethash: {}
    },
    comment: "PoW test network to replace Ropsten",
    url: "https://github.com/ethereum/go-ethereum/pull/23730",
    genesis: {
      timestamp: "0x6159af19",
      gasLimit: 3e7,
      difficulty: 131072,
      nonce: "0x0000000000000000",
      extraData: "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"
    },
    hardforks: [
      {
        name: "chainstart",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "homestead",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "tangerineWhistle",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "spuriousDragon",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "byzantium",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "constantinople",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "petersburg",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "istanbul",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "muirGlacier",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "berlin",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        name: "london",
        block: 0,
        forkHash: "0xfe3366e7"
      },
      {
        // The forkHash will remain same as mergeForkIdTransition is post merge,
        // terminal block: https://sepolia.etherscan.io/block/1450408
        name: "paris",
        ttd: "17000000000000000",
        block: 1450409,
        forkHash: "0xfe3366e7"
      },
      {
        name: "mergeForkIdTransition",
        block: 1735371,
        forkHash: "0xb96cbd13"
      },
      {
        name: "shanghai",
        block: null,
        timestamp: "1677557088",
        forkHash: "0xf7f9bc08"
      },
      {
        name: "cancun",
        block: null,
        timestamp: "1706655072",
        forkHash: "0x88cf81d9"
      }
    ],
    bootstrapNodes: [
      {
        ip: "18.168.182.86",
        port: 30303,
        id: "9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066",
        location: "",
        comment: "geth"
      },
      {
        ip: "52.14.151.177",
        port: 30303,
        id: "ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7",
        location: "",
        comment: "besu"
      },
      {
        ip: "165.22.196.173",
        port: 30303,
        id: "ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6",
        location: "",
        comment: "EF"
      },
      {
        ip: "65.108.95.67",
        port: 30303,
        id: "075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6",
        location: "",
        comment: "lodestar"
      }
    ],
    dnsNetworks: [
      "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"
    ]
  },
  holesky: {
    name: "holesky",
    chainId: 17e3,
    networkId: 17e3,
    defaultHardfork: "paris",
    consensus: {
      type: "pos",
      algorithm: "casper"
    },
    comment: "PoS test network to replace Goerli",
    url: "https://github.com/eth-clients/holesky/",
    genesis: {
      baseFeePerGas: "0x3B9ACA00",
      difficulty: "0x01",
      extraData: "0x",
      gasLimit: "0x17D7840",
      nonce: "0x0000000000001234",
      timestamp: "0x65156994"
    },
    hardforks: [
      {
        name: "chainstart",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "homestead",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "tangerineWhistle",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "spuriousDragon",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "byzantium",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "constantinople",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "petersburg",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "istanbul",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "muirGlacier",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "berlin",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "london",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "paris",
        ttd: "0",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "mergeForkIdTransition",
        block: 0,
        forkHash: "0xc61a6098"
      },
      {
        name: "shanghai",
        block: null,
        timestamp: "1696000704",
        forkHash: "0xfd4f016b"
      },
      {
        name: "cancun",
        block: null,
        timestamp: "1707305664",
        forkHash: "0x9b192ad0"
      }
    ],
    bootstrapNodes: [
      {
        ip: "146.190.13.128",
        port: 30303,
        id: "ac906289e4b7f12df423d654c5a962b6ebe5b3a74cc9e06292a85221f9a64a6f1cfdd6b714ed6dacef51578f92b34c60ee91e9ede9c7f8fadc4d347326d95e2b",
        location: "",
        comment: "bootnode 1"
      },
      {
        ip: "178.128.136.233",
        port: 30303,
        id: "a3435a0155a3e837c02f5e7f5662a2f1fbc25b48e4dc232016e1c51b544cb5b4510ef633ea3278c0e970fa8ad8141e2d4d0f9f95456c537ff05fdf9b31c15072",
        location: "",
        comment: "bootnode 2"
      }
    ],
    dnsNetworks: [
      "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.holesky.ethdisco.net"
    ]
  },
  kaustinen6: {
    name: "kaustinen6",
    chainId: 69420,
    networkId: 69420,
    defaultHardfork: "osaka",
    consensus: {
      type: "pos",
      algorithm: "casper"
    },
    comment: "Verkle kaustinen testnet 6 (likely temporary, do not hard-wire into production code)",
    url: "https://github.com/eth-clients/kaustinen/",
    genesis: {
      difficulty: "0x01",
      extraData: "0x",
      gasLimit: "0x17D7840",
      nonce: "0x0000000000001234",
      timestamp: "0x66190fbc"
    },
    hardforks: [
      {
        name: "chainstart",
        block: 0
      },
      {
        name: "homestead",
        block: 0
      },
      {
        name: "tangerineWhistle",
        block: 0
      },
      {
        name: "spuriousDragon",
        block: 0
      },
      {
        name: "byzantium",
        block: 0
      },
      {
        name: "constantinople",
        block: 0
      },
      {
        name: "petersburg",
        block: 0
      },
      {
        name: "istanbul",
        block: 0
      },
      {
        name: "berlin",
        block: 0
      },
      {
        name: "london",
        block: 0
      },
      {
        name: "paris",
        ttd: "0",
        block: 0
      },
      {
        name: "mergeForkIdTransition",
        block: 0
      },
      {
        name: "shanghai",
        block: null,
        timestamp: "0"
      },
      {
        name: "osaka",
        block: null,
        timestamp: "1712848500"
      }
    ],
    bootstrapNodes: [],
    dnsNetworks: []
  }
};

// node_modules/@ethereumjs/common/dist/esm/crc.js
var TABLE = [
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
];
if (typeof Int32Array !== "undefined") {
  TABLE = new Int32Array(TABLE);
}
var crc = (current, previous) => {
  let crc2 = previous === 0 ? 0 : ~~previous ^ -1;
  for (let index = 0; index < current.length; index++) {
    crc2 = TABLE[(crc2 ^ current[index]) & 255] ^ crc2 >>> 8;
  }
  return crc2 ^ -1;
};
var crc32 = (current, previous) => {
  return crc(current, previous) >>> 0;
};

// node_modules/@ethereumjs/common/dist/esm/enums.js
var Chain;
(function(Chain2) {
  Chain2[Chain2["Mainnet"] = 1] = "Mainnet";
  Chain2[Chain2["Goerli"] = 5] = "Goerli";
  Chain2[Chain2["Sepolia"] = 11155111] = "Sepolia";
  Chain2[Chain2["Holesky"] = 17e3] = "Holesky";
  Chain2[Chain2["Kaustinen6"] = 69420] = "Kaustinen6";
})(Chain || (Chain = {}));
var ChainGenesis = {
  [Chain.Mainnet]: {
    name: "mainnet",
    blockNumber: BIGINT_0,
    stateRoot: hexToBytes("0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544")
  },
  [Chain.Goerli]: {
    name: "goerli",
    blockNumber: BIGINT_0,
    stateRoot: hexToBytes("0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008")
  },
  [Chain.Sepolia]: {
    name: "sepolia",
    blockNumber: BIGINT_0,
    stateRoot: hexToBytes("0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494")
  },
  [Chain.Holesky]: {
    name: "holesky",
    blockNumber: BIGINT_0,
    stateRoot: hexToBytes("0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783")
  },
  [Chain.Kaustinen6]: {
    name: "kaustinen6",
    blockNumber: BIGINT_0,
    stateRoot: hexToBytes("0x1fbf85345a3cbba9a6d44f991b721e55620a22397c2a93ee8d5011136ac300ee")
  }
};
var Hardfork;
(function(Hardfork2) {
  Hardfork2["Chainstart"] = "chainstart";
  Hardfork2["Homestead"] = "homestead";
  Hardfork2["Dao"] = "dao";
  Hardfork2["TangerineWhistle"] = "tangerineWhistle";
  Hardfork2["SpuriousDragon"] = "spuriousDragon";
  Hardfork2["Byzantium"] = "byzantium";
  Hardfork2["Constantinople"] = "constantinople";
  Hardfork2["Petersburg"] = "petersburg";
  Hardfork2["Istanbul"] = "istanbul";
  Hardfork2["MuirGlacier"] = "muirGlacier";
  Hardfork2["Berlin"] = "berlin";
  Hardfork2["London"] = "london";
  Hardfork2["ArrowGlacier"] = "arrowGlacier";
  Hardfork2["GrayGlacier"] = "grayGlacier";
  Hardfork2["MergeForkIdTransition"] = "mergeForkIdTransition";
  Hardfork2["Paris"] = "paris";
  Hardfork2["Shanghai"] = "shanghai";
  Hardfork2["Cancun"] = "cancun";
  Hardfork2["Prague"] = "prague";
  Hardfork2["Osaka"] = "osaka";
})(Hardfork || (Hardfork = {}));
var ConsensusType;
(function(ConsensusType2) {
  ConsensusType2["ProofOfStake"] = "pos";
  ConsensusType2["ProofOfWork"] = "pow";
  ConsensusType2["ProofOfAuthority"] = "poa";
})(ConsensusType || (ConsensusType = {}));
var ConsensusAlgorithm;
(function(ConsensusAlgorithm2) {
  ConsensusAlgorithm2["Ethash"] = "ethash";
  ConsensusAlgorithm2["Clique"] = "clique";
  ConsensusAlgorithm2["Casper"] = "casper";
})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));
var CustomChain;
(function(CustomChain2) {
  CustomChain2["PolygonMainnet"] = "polygon-mainnet";
  CustomChain2["PolygonMumbai"] = "polygon-mumbai";
  CustomChain2["ArbitrumOne"] = "arbitrum-one";
  CustomChain2["xDaiChain"] = "x-dai-chain";
  CustomChain2["OptimisticKovan"] = "optimistic-kovan";
  CustomChain2["OptimisticEthereum"] = "optimistic-ethereum";
})(CustomChain || (CustomChain = {}));

// node_modules/@ethereumjs/common/dist/esm/eips.js
var Status;
(function(Status3) {
  Status3["Stagnant"] = "stagnant";
  Status3["Draft"] = "draft";
  Status3["Review"] = "review";
  Status3["Final"] = "final";
})(Status || (Status = {}));
var EIPs = {
  1153: {
    comment: "Transient storage opcodes",
    url: "https://eips.ethereum.org/EIPS/eip-1153",
    status: Status.Review,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: [],
    gasPrices: {
      tstore: {
        v: 100,
        d: "Base fee of the TSTORE opcode"
      },
      tload: {
        v: 100,
        d: "Base fee of the TLOAD opcode"
      }
    }
  },
  1559: {
    comment: "Fee market change for ETH 1.0 chain",
    url: "https://eips.ethereum.org/EIPS/eip-1559",
    status: Status.Final,
    minimumHardfork: Hardfork.Berlin,
    requiredEIPs: [2930],
    gasConfig: {
      baseFeeMaxChangeDenominator: {
        v: 8,
        d: "Maximum base fee change denominator"
      },
      elasticityMultiplier: {
        v: 2,
        d: "Maximum block gas target elasticity"
      },
      initialBaseFee: {
        v: 1e9,
        d: "Initial base fee on first EIP1559 block"
      }
    }
  },
  2565: {
    comment: "ModExp gas cost",
    url: "https://eips.ethereum.org/EIPS/eip-2565",
    status: Status.Final,
    minimumHardfork: Hardfork.Byzantium,
    requiredEIPs: [],
    gasPrices: {
      modexpGquaddivisor: {
        v: 3,
        d: "Gquaddivisor from modexp precompile for gas calculation"
      }
    }
  },
  2537: {
    comment: "BLS12-381 precompiles",
    url: "https://eips.ethereum.org/EIPS/eip-2537",
    status: "Draft",
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: [],
    gasConfig: {},
    gasPrices: {
      Bls12381G1AddGas: {
        v: 500,
        d: "Gas cost of a single BLS12-381 G1 addition precompile-call"
      },
      Bls12381G1MulGas: {
        v: 12e3,
        d: "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
      },
      Bls12381G2AddGas: {
        v: 800,
        d: "Gas cost of a single BLS12-381 G2 addition precompile-call"
      },
      Bls12381G2MulGas: {
        v: 45e3,
        d: "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
      },
      Bls12381PairingBaseGas: {
        v: 65e3,
        d: "Base gas cost of BLS12-381 pairing check"
      },
      Bls12381PairingPerPairGas: {
        v: 43e3,
        d: "Per-pair gas cost of BLS12-381 pairing check"
      },
      Bls12381MapG1Gas: {
        v: 5500,
        d: "Gas cost of BLS12-381 map field element to G1"
      },
      Bls12381MapG2Gas: {
        v: 75e3,
        d: "Gas cost of BLS12-381 map field element to G2"
      }
    },
    vm: {},
    pow: {}
  },
  2718: {
    comment: "Typed Transaction Envelope",
    url: "https://eips.ethereum.org/EIPS/eip-2718",
    status: Status.Final,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: []
  },
  2929: {
    comment: "Gas cost increases for state access opcodes",
    url: "https://eips.ethereum.org/EIPS/eip-2929",
    status: Status.Final,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: [],
    gasPrices: {
      coldsload: {
        v: 2100,
        d: "Gas cost of the first read of storage from a given location (per transaction)"
      },
      coldaccountaccess: {
        v: 2600,
        d: "Gas cost of the first read of a given address (per transaction)"
      },
      warmstorageread: {
        v: 100,
        d: "Gas cost of reading storage locations which have already loaded 'cold'"
      },
      sstoreCleanGasEIP2200: {
        v: 2900,
        d: "Once per SSTORE operation from clean non-zero to something else"
      },
      sstoreNoopGasEIP2200: {
        v: 100,
        d: "Once per SSTORE operation if the value doesn't change"
      },
      sstoreDirtyGasEIP2200: {
        v: 100,
        d: "Once per SSTORE operation if a dirty value is changed"
      },
      sstoreInitRefundEIP2200: {
        v: 19900,
        d: "Once per SSTORE operation for resetting to the original zero value"
      },
      sstoreCleanRefundEIP2200: {
        v: 4900,
        d: "Once per SSTORE operation for resetting to the original non-zero value"
      },
      call: {
        v: 0,
        d: "Base fee of the CALL opcode"
      },
      callcode: {
        v: 0,
        d: "Base fee of the CALLCODE opcode"
      },
      delegatecall: {
        v: 0,
        d: "Base fee of the DELEGATECALL opcode"
      },
      staticcall: {
        v: 0,
        d: "Base fee of the STATICCALL opcode"
      },
      balance: {
        v: 0,
        d: "Base fee of the BALANCE opcode"
      },
      extcodesize: {
        v: 0,
        d: "Base fee of the EXTCODESIZE opcode"
      },
      extcodecopy: {
        v: 0,
        d: "Base fee of the EXTCODECOPY opcode"
      },
      extcodehash: {
        v: 0,
        d: "Base fee of the EXTCODEHASH opcode"
      },
      sload: {
        v: 0,
        d: "Base fee of the SLOAD opcode"
      },
      sstore: {
        v: 0,
        d: "Base fee of the SSTORE opcode"
      }
    }
  },
  2930: {
    comment: "Optional access lists",
    url: "https://eips.ethereum.org/EIPS/eip-2930",
    status: Status.Final,
    minimumHardfork: Hardfork.Istanbul,
    requiredEIPs: [2718, 2929],
    gasPrices: {
      accessListStorageKeyCost: {
        v: 1900,
        d: "Gas cost per storage key in an Access List transaction"
      },
      accessListAddressCost: {
        v: 2400,
        d: "Gas cost per storage key in an Access List transaction"
      }
    }
  },
  2935: {
    comment: "Save historical block hashes in state (Verkle related usage, UNSTABLE)",
    url: "https://github.com/gballet/EIPs/pull/3/commits/2e9ac09a142b0d9fb4db0b8d4609f92e5d9990c5",
    status: Status.Draft,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: [],
    vm: {
      historyStorageAddress: {
        v: BigInt("0x0aae40965e6800cd9b1f4b05ff21581047e3f91e"),
        d: "The address where the historical blockhashes are stored"
      },
      historyServeWindow: {
        v: BigInt(8192),
        d: "The amount of blocks to be served by the historical blockhash contract"
      }
    }
  },
  3074: {
    comment: "AUTH and AUTHCALL opcodes",
    url: "https://github.com/ethereum/EIPs/commit/eca4416ff3c025fcb6ec8cd4eac481e74e108481",
    status: Status.Review,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [],
    gasPrices: {
      auth: {
        v: 3100,
        d: "Gas cost of the AUTH opcode"
      },
      authcall: {
        v: 0,
        d: "Gas cost of the AUTHCALL opcode"
      },
      authcallValueTransfer: {
        v: 6700,
        d: "Paid for CALL when the value transfer is non-zero"
      }
    }
  },
  3198: {
    comment: "BASEFEE opcode",
    url: "https://eips.ethereum.org/EIPS/eip-3198",
    status: Status.Final,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [],
    gasPrices: {
      basefee: {
        v: 2,
        d: "Gas cost of the BASEFEE opcode"
      }
    }
  },
  3529: {
    comment: "Reduction in refunds",
    url: "https://eips.ethereum.org/EIPS/eip-3529",
    status: Status.Final,
    minimumHardfork: Hardfork.Berlin,
    requiredEIPs: [2929],
    gasConfig: {
      maxRefundQuotient: {
        v: 5,
        d: "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
      }
    },
    gasPrices: {
      selfdestructRefund: {
        v: 0,
        d: "Refunded following a selfdestruct operation"
      },
      sstoreClearRefundEIP2200: {
        v: 4800,
        d: "Once per SSTORE operation for clearing an originally existing storage slot"
      }
    }
  },
  3540: {
    comment: "EVM Object Format (EOF) v1",
    url: "https://eips.ethereum.org/EIPS/eip-3540",
    status: Status.Review,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [3541]
  },
  3541: {
    comment: "Reject new contracts starting with the 0xEF byte",
    url: "https://eips.ethereum.org/EIPS/eip-3541",
    status: Status.Final,
    minimumHardfork: Hardfork.Berlin,
    requiredEIPs: []
  },
  3554: {
    comment: "Difficulty Bomb Delay to December 1st 2021",
    url: "https://eips.ethereum.org/EIPS/eip-3554",
    status: Status.Final,
    minimumHardfork: Hardfork.MuirGlacier,
    requiredEIPs: [],
    pow: {
      difficultyBombDelay: {
        v: 95e5,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  3607: {
    comment: "Reject transactions from senders with deployed code",
    url: "https://eips.ethereum.org/EIPS/eip-3607",
    status: Status.Final,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: []
  },
  3651: {
    comment: "Warm COINBASE",
    url: "https://eips.ethereum.org/EIPS/eip-3651",
    status: Status.Review,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [2929]
  },
  3670: {
    comment: "EOF - Code Validation",
    url: "https://eips.ethereum.org/EIPS/eip-3670",
    status: "Review",
    minimumHardfork: Hardfork.London,
    requiredEIPs: [3540],
    gasConfig: {},
    gasPrices: {},
    vm: {},
    pow: {}
  },
  3675: {
    comment: "Upgrade consensus to Proof-of-Stake",
    url: "https://eips.ethereum.org/EIPS/eip-3675",
    status: Status.Final,
    minimumHardfork: Hardfork.London,
    requiredEIPs: []
  },
  3855: {
    comment: "PUSH0 instruction",
    url: "https://eips.ethereum.org/EIPS/eip-3855",
    status: Status.Review,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: [],
    gasPrices: {
      push0: {
        v: 2,
        d: "Base fee of the PUSH0 opcode"
      }
    }
  },
  3860: {
    comment: "Limit and meter initcode",
    url: "https://eips.ethereum.org/EIPS/eip-3860",
    status: Status.Review,
    minimumHardfork: Hardfork.SpuriousDragon,
    requiredEIPs: [],
    gasPrices: {
      initCodeWordCost: {
        v: 2,
        d: "Gas to pay for each word (32 bytes) of initcode when creating a contract"
      }
    },
    vm: {
      maxInitCodeSize: {
        v: 49152,
        d: "Maximum length of initialization code when creating a contract"
      }
    }
  },
  4345: {
    comment: "Difficulty Bomb Delay to June 2022",
    url: "https://eips.ethereum.org/EIPS/eip-4345",
    status: Status.Final,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [],
    pow: {
      difficultyBombDelay: {
        v: 107e5,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  4399: {
    comment: "Supplant DIFFICULTY opcode with PREVRANDAO",
    url: "https://eips.ethereum.org/EIPS/eip-4399",
    status: Status.Review,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [],
    gasPrices: {
      prevrandao: {
        v: 2,
        d: "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)"
      }
    }
  },
  4788: {
    comment: "Beacon block root in the EVM",
    url: "https://eips.ethereum.org/EIPS/eip-4788",
    status: Status.Draft,
    minimumHardfork: Hardfork.Cancun,
    requiredEIPs: [],
    gasPrices: {},
    vm: {
      historicalRootsLength: {
        v: 8191,
        d: "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile"
      }
    }
  },
  4844: {
    comment: "Shard Blob Transactions",
    url: "https://eips.ethereum.org/EIPS/eip-4844",
    status: Status.Draft,
    minimumHardfork: Hardfork.Paris,
    requiredEIPs: [1559, 2718, 2930, 4895],
    gasConfig: {
      blobGasPerBlob: {
        v: 131072,
        d: "The base fee for blob gas per blob"
      },
      targetBlobGasPerBlock: {
        v: 393216,
        d: "The target blob gas consumed per block"
      },
      maxblobGasPerBlock: {
        v: 786432,
        d: "The max blob gas allowable per block"
      },
      blobGasPriceUpdateFraction: {
        v: 3338477,
        d: "The denominator used in the exponential when calculating a blob gas price"
      }
    },
    gasPrices: {
      simpleGasPerBlob: {
        v: 12e3,
        d: "The basic gas fee for each blob"
      },
      minBlobGasPrice: {
        v: 1,
        d: "The minimum fee per blob gas"
      },
      kzgPointEvaluationGasPrecompilePrice: {
        v: 5e4,
        d: "The fee associated with the point evaluation precompile"
      },
      blobhash: {
        v: 3,
        d: "Base fee of the BLOBHASH opcode"
      }
    },
    sharding: {
      blobCommitmentVersionKzg: {
        v: 1,
        d: "The number indicated a versioned hash is a KZG commitment"
      },
      fieldElementsPerBlob: {
        v: 4096,
        d: "The number of field elements allowed per blob"
      }
    }
  },
  4895: {
    comment: "Beacon chain push withdrawals as operations",
    url: "https://eips.ethereum.org/EIPS/eip-4895",
    status: Status.Review,
    minimumHardfork: Hardfork.Paris,
    requiredEIPs: []
  },
  5133: {
    comment: "Delaying Difficulty Bomb to mid-September 2022",
    url: "https://eips.ethereum.org/EIPS/eip-5133",
    status: Status.Draft,
    minimumHardfork: Hardfork.GrayGlacier,
    requiredEIPs: [],
    pow: {
      difficultyBombDelay: {
        v: 114e5,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  5656: {
    comment: "MCOPY - Memory copying instruction",
    url: "https://eips.ethereum.org/EIPS/eip-5656",
    status: Status.Draft,
    minimumHardfork: Hardfork.Shanghai,
    requiredEIPs: [],
    gasPrices: {
      mcopy: {
        v: 3,
        d: "Base fee of the MCOPY opcode"
      }
    }
  },
  6110: {
    comment: "Supply validator deposits on chain",
    url: "https://eips.ethereum.org/EIPS/eip-6110",
    status: Status.Draft,
    minimumHardfork: Hardfork.Cancun,
    requiredEIPs: [7685]
  },
  6780: {
    comment: "SELFDESTRUCT only in same transaction",
    url: "https://eips.ethereum.org/EIPS/eip-6780",
    status: Status.Draft,
    minimumHardfork: Hardfork.London,
    requiredEIPs: []
  },
  6800: {
    comment: "Ethereum state using a unified verkle tree (experimental)",
    url: "https://github.com/ethereum/EIPs/pull/6800",
    status: Status.Draft,
    minimumHardfork: Hardfork.London,
    requiredEIPs: [],
    gasPrices: {
      create: {
        v: 1e3,
        d: "Base fee of the CREATE opcode"
      },
      coldsload: {
        v: 0,
        d: "Gas cost of the first read of storage from a given location (per transaction)"
      }
    },
    vm: {
      // kaustinen 6 current uses this address, however this will be updated to correct address
      // in next iteration
      historyStorageAddress: {
        v: BigInt("0xfffffffffffffffffffffffffffffffffffffffe"),
        d: "The address where the historical blockhashes are stored"
      }
    }
  },
  7002: {
    comment: "Execution layer triggerable withdrawals (experimental)",
    url: "https://github.com/ethereum/EIPs/blob/3b5fcad6b35782f8aaeba7d4ac26004e8fbd720f/EIPS/eip-7002.md",
    status: Status.Draft,
    minimumHardfork: Hardfork.Paris,
    requiredEIPs: [7685],
    vm: {
      withdrawalRequestType: {
        v: BigInt(1),
        d: "The withdrawal request type for EIP-7685"
      },
      excessWithdrawalsRequestStorageSlot: {
        v: BigInt(0),
        d: "The storage slot of the excess withdrawals"
      },
      withdrawalsRequestCountStorage: {
        v: BigInt(1),
        d: "The storage slot of the withdrawal request count"
      },
      withdrawalsRequestQueueHeadStorageSlot: {
        v: BigInt(2),
        d: "The storage slot of the withdrawal request head of the queue"
      },
      withdrawalsRequestTailHeadStorageSlot: {
        v: BigInt(3),
        d: "The storage slot of the withdrawal request tail of the queue"
      },
      withdrawalsRequestQueueStorageOffset: {
        v: BigInt(4),
        d: "The storage slot of the withdrawal request queue offset"
      },
      maxWithdrawalRequestsPerBlock: {
        v: BigInt(16),
        d: "The max withdrawal requests per block"
      },
      targetWithdrawalRequestsPerBlock: {
        v: BigInt(2),
        d: "The target withdrawal requests per block"
      },
      minWithdrawalRequestFee: {
        v: BigInt(1),
        d: "The minimum withdrawal request fee (in wei)"
      },
      withdrawalRequestFeeUpdateFraction: {
        v: BigInt(17),
        d: "The withdrawal request fee update fraction (used in the fake exponential)"
      },
      systemAddress: {
        v: BigInt("0xfffffffffffffffffffffffffffffffffffffffe"),
        d: "The system address to perform operations on the withdrawal requests predeploy address"
      },
      withdrawalRequestPredeployAddress: {
        v: BigInt("0x00A3ca265EBcb825B45F985A16CEFB49958cE017"),
        d: "Address of the validator excess address"
      }
    }
  },
  7251: {
    comment: "Execution layer triggered consolidations (experimental)",
    url: "https://eips.ethereum.org/EIPS/eip-7251",
    status: Status.Draft,
    minimumHardfork: Hardfork.Paris,
    requiredEIPs: [7685],
    vm: {
      consolidationRequestType: {
        v: BigInt(2),
        d: "The withdrawal request type for EIP-7685"
      },
      systemAddress: {
        v: BigInt("0xfffffffffffffffffffffffffffffffffffffffe"),
        d: "The system address to perform operations on the consolidation requests predeploy address"
      },
      consolidationRequestPredeployAddress: {
        v: BigInt("0x00b42dbF2194e931E80326D950320f7d9Dbeac02"),
        d: "Address of the consolidations contract"
      }
    }
  },
  7516: {
    comment: "BLOBBASEFEE opcode",
    url: "https://eips.ethereum.org/EIPS/eip-7516",
    status: Status.Draft,
    minimumHardfork: Hardfork.Paris,
    requiredEIPs: [4844],
    gasPrices: {
      blobbasefee: {
        v: 2,
        d: "Gas cost of the BLOBBASEFEE opcode"
      }
    }
  },
  7685: {
    comment: "General purpose execution layer requests",
    url: "https://eips.ethereum.org/EIPS/eip-7685",
    status: Status.Draft,
    // TODO: Set correct minimum hardfork
    minimumHardfork: Hardfork.Cancun,
    requiredEIPs: [3675],
    gasPrices: {}
  },
  7702: {
    comment: "Set EOA account code for one transaction",
    url: "https://github.com/ethereum/EIPs/blob/62419ca3f45375db00b04a368ea37c0bfb05386a/EIPS/eip-7702.md",
    status: Status.Review,
    // TODO: Set correct minimum hardfork
    minimumHardfork: Hardfork.Cancun,
    requiredEIPs: [2718, 2929, 2930],
    gasPrices: {
      perAuthBaseCost: {
        v: 2500,
        d: "Gas cost of each authority item"
      }
    }
  },
  7709: {
    comment: "Use historical block hashes saved in state for BLOCKHASH",
    url: "https://eips.ethereum.org/EIPS/eip-7709",
    status: Status.Draft,
    minimumHardfork: Hardfork.Chainstart,
    requiredEIPs: [2935]
  }
};

// node_modules/@ethereumjs/common/dist/esm/hardforks.js
var Status2;
(function(Status3) {
  Status3["Draft"] = "draft";
  Status3["Review"] = "review";
  Status3["Final"] = "final";
})(Status2 || (Status2 = {}));
var hardforks = {
  chainstart: {
    name: "chainstart",
    comment: "Start of the Ethereum main chain",
    url: "",
    status: Status2.Final,
    gasConfig: {
      minGasLimit: {
        v: 5e3,
        d: "Minimum the gas limit may ever be"
      },
      gasLimitBoundDivisor: {
        v: 1024,
        d: "The bound divisor of the gas limit, used in update calculations"
      },
      maxRefundQuotient: {
        v: 2,
        d: "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
      }
    },
    gasPrices: {
      base: {
        v: 2,
        d: "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
      },
      exp: {
        v: 10,
        d: "Base fee of the EXP opcode"
      },
      expByte: {
        v: 10,
        d: "Times ceil(log256(exponent)) for the EXP instruction"
      },
      keccak256: {
        v: 30,
        d: "Base fee of the SHA3 opcode"
      },
      keccak256Word: {
        v: 6,
        d: "Once per word of the SHA3 operation's data"
      },
      sload: {
        v: 50,
        d: "Base fee of the SLOAD opcode"
      },
      sstoreSet: {
        v: 2e4,
        d: "Once per SSTORE operation if the zeroness changes from zero"
      },
      sstoreReset: {
        v: 5e3,
        d: "Once per SSTORE operation if the zeroness does not change from zero"
      },
      sstoreRefund: {
        v: 15e3,
        d: "Once per SSTORE operation if the zeroness changes to zero"
      },
      jumpdest: {
        v: 1,
        d: "Base fee of the JUMPDEST opcode"
      },
      log: {
        v: 375,
        d: "Base fee of the LOG opcode"
      },
      logData: {
        v: 8,
        d: "Per byte in a LOG* operation's data"
      },
      logTopic: {
        v: 375,
        d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
      },
      create: {
        v: 32e3,
        d: "Base fee of the CREATE opcode"
      },
      call: {
        v: 40,
        d: "Base fee of the CALL opcode"
      },
      callStipend: {
        v: 2300,
        d: "Free gas given at beginning of call"
      },
      callValueTransfer: {
        v: 9e3,
        d: "Paid for CALL when the value transfor is non-zero"
      },
      callNewAccount: {
        v: 25e3,
        d: "Paid for CALL when the destination address didn't exist prior"
      },
      selfdestructRefund: {
        v: 24e3,
        d: "Refunded following a selfdestruct operation"
      },
      memory: {
        v: 3,
        d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
      },
      quadCoeffDiv: {
        v: 512,
        d: "Divisor for the quadratic particle of the memory cost equation"
      },
      createData: {
        v: 200,
        d: ""
      },
      tx: {
        v: 21e3,
        d: "Per transaction. NOTE: Not payable on data of calls between transactions"
      },
      txCreation: {
        v: 32e3,
        d: "The cost of creating a contract via tx"
      },
      txDataZero: {
        v: 4,
        d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
      },
      txDataNonZero: {
        v: 68,
        d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
      },
      copy: {
        v: 3,
        d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
      },
      ecRecover: {
        v: 3e3,
        d: ""
      },
      sha256: {
        v: 60,
        d: ""
      },
      sha256Word: {
        v: 12,
        d: ""
      },
      ripemd160: {
        v: 600,
        d: ""
      },
      ripemd160Word: {
        v: 120,
        d: ""
      },
      identity: {
        v: 15,
        d: ""
      },
      identityWord: {
        v: 3,
        d: ""
      },
      stop: {
        v: 0,
        d: "Base fee of the STOP opcode"
      },
      add: {
        v: 3,
        d: "Base fee of the ADD opcode"
      },
      mul: {
        v: 5,
        d: "Base fee of the MUL opcode"
      },
      sub: {
        v: 3,
        d: "Base fee of the SUB opcode"
      },
      div: {
        v: 5,
        d: "Base fee of the DIV opcode"
      },
      sdiv: {
        v: 5,
        d: "Base fee of the SDIV opcode"
      },
      mod: {
        v: 5,
        d: "Base fee of the MOD opcode"
      },
      smod: {
        v: 5,
        d: "Base fee of the SMOD opcode"
      },
      addmod: {
        v: 8,
        d: "Base fee of the ADDMOD opcode"
      },
      mulmod: {
        v: 8,
        d: "Base fee of the MULMOD opcode"
      },
      signextend: {
        v: 5,
        d: "Base fee of the SIGNEXTEND opcode"
      },
      lt: {
        v: 3,
        d: "Base fee of the LT opcode"
      },
      gt: {
        v: 3,
        d: "Base fee of the GT opcode"
      },
      slt: {
        v: 3,
        d: "Base fee of the SLT opcode"
      },
      sgt: {
        v: 3,
        d: "Base fee of the SGT opcode"
      },
      eq: {
        v: 3,
        d: "Base fee of the EQ opcode"
      },
      iszero: {
        v: 3,
        d: "Base fee of the ISZERO opcode"
      },
      and: {
        v: 3,
        d: "Base fee of the AND opcode"
      },
      or: {
        v: 3,
        d: "Base fee of the OR opcode"
      },
      xor: {
        v: 3,
        d: "Base fee of the XOR opcode"
      },
      not: {
        v: 3,
        d: "Base fee of the NOT opcode"
      },
      byte: {
        v: 3,
        d: "Base fee of the BYTE opcode"
      },
      address: {
        v: 2,
        d: "Base fee of the ADDRESS opcode"
      },
      balance: {
        v: 20,
        d: "Base fee of the BALANCE opcode"
      },
      origin: {
        v: 2,
        d: "Base fee of the ORIGIN opcode"
      },
      caller: {
        v: 2,
        d: "Base fee of the CALLER opcode"
      },
      callvalue: {
        v: 2,
        d: "Base fee of the CALLVALUE opcode"
      },
      calldataload: {
        v: 3,
        d: "Base fee of the CALLDATALOAD opcode"
      },
      calldatasize: {
        v: 2,
        d: "Base fee of the CALLDATASIZE opcode"
      },
      calldatacopy: {
        v: 3,
        d: "Base fee of the CALLDATACOPY opcode"
      },
      codesize: {
        v: 2,
        d: "Base fee of the CODESIZE opcode"
      },
      codecopy: {
        v: 3,
        d: "Base fee of the CODECOPY opcode"
      },
      gasprice: {
        v: 2,
        d: "Base fee of the GASPRICE opcode"
      },
      extcodesize: {
        v: 20,
        d: "Base fee of the EXTCODESIZE opcode"
      },
      extcodecopy: {
        v: 20,
        d: "Base fee of the EXTCODECOPY opcode"
      },
      blockhash: {
        v: 20,
        d: "Base fee of the BLOCKHASH opcode"
      },
      coinbase: {
        v: 2,
        d: "Base fee of the COINBASE opcode"
      },
      timestamp: {
        v: 2,
        d: "Base fee of the TIMESTAMP opcode"
      },
      number: {
        v: 2,
        d: "Base fee of the NUMBER opcode"
      },
      difficulty: {
        v: 2,
        d: "Base fee of the DIFFICULTY opcode"
      },
      gaslimit: {
        v: 2,
        d: "Base fee of the GASLIMIT opcode"
      },
      pop: {
        v: 2,
        d: "Base fee of the POP opcode"
      },
      mload: {
        v: 3,
        d: "Base fee of the MLOAD opcode"
      },
      mstore: {
        v: 3,
        d: "Base fee of the MSTORE opcode"
      },
      mstore8: {
        v: 3,
        d: "Base fee of the MSTORE8 opcode"
      },
      sstore: {
        v: 0,
        d: "Base fee of the SSTORE opcode"
      },
      jump: {
        v: 8,
        d: "Base fee of the JUMP opcode"
      },
      jumpi: {
        v: 10,
        d: "Base fee of the JUMPI opcode"
      },
      pc: {
        v: 2,
        d: "Base fee of the PC opcode"
      },
      msize: {
        v: 2,
        d: "Base fee of the MSIZE opcode"
      },
      gas: {
        v: 2,
        d: "Base fee of the GAS opcode"
      },
      push: {
        v: 3,
        d: "Base fee of the PUSH opcode"
      },
      dup: {
        v: 3,
        d: "Base fee of the DUP opcode"
      },
      swap: {
        v: 3,
        d: "Base fee of the SWAP opcode"
      },
      callcode: {
        v: 40,
        d: "Base fee of the CALLCODE opcode"
      },
      return: {
        v: 0,
        d: "Base fee of the RETURN opcode"
      },
      invalid: {
        v: 0,
        d: "Base fee of the INVALID opcode"
      },
      selfdestruct: {
        v: 0,
        d: "Base fee of the SELFDESTRUCT opcode"
      }
    },
    vm: {
      stackLimit: {
        v: 1024,
        d: "Maximum size of VM stack allowed"
      },
      callCreateDepth: {
        v: 1024,
        d: "Maximum depth of call/create stack"
      },
      maxExtraDataSize: {
        v: 32,
        d: "Maximum size extra data may be after Genesis"
      }
    },
    pow: {
      minimumDifficulty: {
        v: 131072,
        d: "The minimum that the difficulty may ever be"
      },
      difficultyBoundDivisor: {
        v: 2048,
        d: "The bound divisor of the difficulty, used in the update calculations"
      },
      durationLimit: {
        v: 13,
        d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
      },
      epochDuration: {
        v: 3e4,
        d: "Duration between proof-of-work epochs"
      },
      timebombPeriod: {
        v: 1e5,
        d: "Exponential difficulty timebomb period"
      },
      minerReward: {
        v: BigInt("5000000000000000000"),
        d: "the amount a miner get rewarded for mining a block"
      },
      difficultyBombDelay: {
        v: 0,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  homestead: {
    name: "homestead",
    comment: "Homestead hardfork with protocol and network changes",
    url: "https://eips.ethereum.org/EIPS/eip-606",
    status: Status2.Final,
    gasPrices: {
      delegatecall: {
        v: 40,
        d: "Base fee of the DELEGATECALL opcode"
      }
    }
  },
  dao: {
    name: "dao",
    comment: "DAO rescue hardfork",
    url: "https://eips.ethereum.org/EIPS/eip-779",
    status: Status2.Final
  },
  tangerineWhistle: {
    name: "tangerineWhistle",
    comment: "Hardfork with gas cost changes for IO-heavy operations",
    url: "https://eips.ethereum.org/EIPS/eip-608",
    status: Status2.Final,
    gasPrices: {
      sload: {
        v: 200,
        d: "Once per SLOAD operation"
      },
      call: {
        v: 700,
        d: "Once per CALL operation & message call transaction"
      },
      extcodesize: {
        v: 700,
        d: "Base fee of the EXTCODESIZE opcode"
      },
      extcodecopy: {
        v: 700,
        d: "Base fee of the EXTCODECOPY opcode"
      },
      balance: {
        v: 400,
        d: "Base fee of the BALANCE opcode"
      },
      delegatecall: {
        v: 700,
        d: "Base fee of the DELEGATECALL opcode"
      },
      callcode: {
        v: 700,
        d: "Base fee of the CALLCODE opcode"
      },
      selfdestruct: {
        v: 5e3,
        d: "Base fee of the SELFDESTRUCT opcode"
      }
    }
  },
  spuriousDragon: {
    name: "spuriousDragon",
    comment: "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
    url: "https://eips.ethereum.org/EIPS/eip-607",
    status: Status2.Final,
    gasPrices: {
      expByte: {
        v: 50,
        d: "Times ceil(log256(exponent)) for the EXP instruction"
      }
    },
    vm: {
      maxCodeSize: {
        v: 24576,
        d: "Maximum length of contract code"
      }
    }
  },
  byzantium: {
    name: "byzantium",
    comment: "Hardfork with new precompiles, instructions and other protocol changes",
    url: "https://eips.ethereum.org/EIPS/eip-609",
    status: Status2.Final,
    gasPrices: {
      modexpGquaddivisor: {
        v: 20,
        d: "Gquaddivisor from modexp precompile for gas calculation"
      },
      ecAdd: {
        v: 500,
        d: "Gas costs for curve addition precompile"
      },
      ecMul: {
        v: 4e4,
        d: "Gas costs for curve multiplication precompile"
      },
      ecPairing: {
        v: 1e5,
        d: "Base gas costs for curve pairing precompile"
      },
      ecPairingWord: {
        v: 8e4,
        d: "Gas costs regarding curve pairing precompile input length"
      },
      revert: {
        v: 0,
        d: "Base fee of the REVERT opcode"
      },
      staticcall: {
        v: 700,
        d: "Base fee of the STATICCALL opcode"
      },
      returndatasize: {
        v: 2,
        d: "Base fee of the RETURNDATASIZE opcode"
      },
      returndatacopy: {
        v: 3,
        d: "Base fee of the RETURNDATACOPY opcode"
      }
    },
    pow: {
      minerReward: {
        v: BigInt("3000000000000000000"),
        d: "the amount a miner get rewarded for mining a block"
      },
      difficultyBombDelay: {
        v: 3e6,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  constantinople: {
    name: "constantinople",
    comment: "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
    url: "https://eips.ethereum.org/EIPS/eip-1013",
    status: Status2.Final,
    gasPrices: {
      netSstoreNoopGas: {
        v: 200,
        d: "Once per SSTORE operation if the value doesn't change"
      },
      netSstoreInitGas: {
        v: 2e4,
        d: "Once per SSTORE operation from clean zero"
      },
      netSstoreCleanGas: {
        v: 5e3,
        d: "Once per SSTORE operation from clean non-zero"
      },
      netSstoreDirtyGas: {
        v: 200,
        d: "Once per SSTORE operation from dirty"
      },
      netSstoreClearRefund: {
        v: 15e3,
        d: "Once per SSTORE operation for clearing an originally existing storage slot"
      },
      netSstoreResetRefund: {
        v: 4800,
        d: "Once per SSTORE operation for resetting to the original non-zero value"
      },
      netSstoreResetClearRefund: {
        v: 19800,
        d: "Once per SSTORE operation for resetting to the original zero value"
      },
      shl: {
        v: 3,
        d: "Base fee of the SHL opcode"
      },
      shr: {
        v: 3,
        d: "Base fee of the SHR opcode"
      },
      sar: {
        v: 3,
        d: "Base fee of the SAR opcode"
      },
      extcodehash: {
        v: 400,
        d: "Base fee of the EXTCODEHASH opcode"
      },
      create2: {
        v: 32e3,
        d: "Base fee of the CREATE2 opcode"
      }
    },
    pow: {
      minerReward: {
        v: BigInt("2000000000000000000"),
        d: "The amount a miner gets rewarded for mining a block"
      },
      difficultyBombDelay: {
        v: 5e6,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  petersburg: {
    name: "petersburg",
    comment: "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
    url: "https://eips.ethereum.org/EIPS/eip-1716",
    status: Status2.Final,
    gasPrices: {
      netSstoreNoopGas: {
        v: null,
        d: "Removed along EIP-1283"
      },
      netSstoreInitGas: {
        v: null,
        d: "Removed along EIP-1283"
      },
      netSstoreCleanGas: {
        v: null,
        d: "Removed along EIP-1283"
      },
      netSstoreDirtyGas: {
        v: null,
        d: "Removed along EIP-1283"
      },
      netSstoreClearRefund: {
        v: null,
        d: "Removed along EIP-1283"
      },
      netSstoreResetRefund: {
        v: null,
        d: "Removed along EIP-1283"
      },
      netSstoreResetClearRefund: {
        v: null,
        d: "Removed along EIP-1283"
      }
    }
  },
  istanbul: {
    name: "istanbul",
    comment: "HF targeted for December 2019 following the Constantinople/Petersburg HF",
    url: "https://eips.ethereum.org/EIPS/eip-1679",
    status: Status2.Final,
    gasConfig: {},
    gasPrices: {
      blake2Round: {
        v: 1,
        d: "Gas cost per round for the Blake2 F precompile"
      },
      ecAdd: {
        v: 150,
        d: "Gas costs for curve addition precompile"
      },
      ecMul: {
        v: 6e3,
        d: "Gas costs for curve multiplication precompile"
      },
      ecPairing: {
        v: 45e3,
        d: "Base gas costs for curve pairing precompile"
      },
      ecPairingWord: {
        v: 34e3,
        d: "Gas costs regarding curve pairing precompile input length"
      },
      txDataNonZero: {
        v: 16,
        d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
      },
      sstoreSentryGasEIP2200: {
        v: 2300,
        d: "Minimum gas required to be present for an SSTORE call, not consumed"
      },
      sstoreNoopGasEIP2200: {
        v: 800,
        d: "Once per SSTORE operation if the value doesn't change"
      },
      sstoreDirtyGasEIP2200: {
        v: 800,
        d: "Once per SSTORE operation if a dirty value is changed"
      },
      sstoreInitGasEIP2200: {
        v: 2e4,
        d: "Once per SSTORE operation from clean zero to non-zero"
      },
      sstoreInitRefundEIP2200: {
        v: 19200,
        d: "Once per SSTORE operation for resetting to the original zero value"
      },
      sstoreCleanGasEIP2200: {
        v: 5e3,
        d: "Once per SSTORE operation from clean non-zero to something else"
      },
      sstoreCleanRefundEIP2200: {
        v: 4200,
        d: "Once per SSTORE operation for resetting to the original non-zero value"
      },
      sstoreClearRefundEIP2200: {
        v: 15e3,
        d: "Once per SSTORE operation for clearing an originally existing storage slot"
      },
      balance: {
        v: 700,
        d: "Base fee of the BALANCE opcode"
      },
      extcodehash: {
        v: 700,
        d: "Base fee of the EXTCODEHASH opcode"
      },
      chainid: {
        v: 2,
        d: "Base fee of the CHAINID opcode"
      },
      selfbalance: {
        v: 5,
        d: "Base fee of the SELFBALANCE opcode"
      },
      sload: {
        v: 800,
        d: "Base fee of the SLOAD opcode"
      }
    }
  },
  muirGlacier: {
    name: "muirGlacier",
    comment: "HF to delay the difficulty bomb",
    url: "https://eips.ethereum.org/EIPS/eip-2384",
    status: Status2.Final,
    pow: {
      difficultyBombDelay: {
        v: 9e6,
        d: "the amount of blocks to delay the difficulty bomb with"
      }
    }
  },
  berlin: {
    name: "berlin",
    comment: "HF targeted for July 2020 following the Muir Glacier HF",
    url: "https://eips.ethereum.org/EIPS/eip-2070",
    status: Status2.Final,
    eips: [2565, 2929, 2718, 2930]
  },
  london: {
    name: "london",
    comment: "HF targeted for July 2021 following the Berlin fork",
    url: "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
    status: Status2.Final,
    eips: [1559, 3198, 3529, 3541]
  },
  arrowGlacier: {
    name: "arrowGlacier",
    comment: "HF to delay the difficulty bomb",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
    status: Status2.Final,
    eips: [4345]
  },
  grayGlacier: {
    name: "grayGlacier",
    comment: "Delaying the difficulty bomb to Mid September 2022",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
    status: Status2.Final,
    eips: [5133]
  },
  paris: {
    name: "paris",
    comment: "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
    status: Status2.Final,
    consensus: {
      type: "pos",
      algorithm: "casper",
      casper: {}
    },
    eips: [3675, 4399]
  },
  mergeForkIdTransition: {
    name: "mergeForkIdTransition",
    comment: "Pre-merge hardfork to fork off non-upgraded clients",
    url: "https://eips.ethereum.org/EIPS/eip-3675",
    status: Status2.Final,
    eips: []
  },
  shanghai: {
    name: "shanghai",
    comment: "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
    status: Status2.Final,
    eips: [3651, 3855, 3860, 4895]
  },
  cancun: {
    name: "cancun",
    comment: "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
    status: Status2.Final,
    eips: [1153, 4844, 4788, 5656, 6780, 7516]
  },
  prague: {
    name: "prague",
    comment: "Next feature hardfork after cancun, internally used for pectra testing/implementation (incomplete/experimental)",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/prague.md",
    status: Status2.Draft,
    eips: [2537, 2935, 3074, 6110, 7002, 7251, 7685]
  },
  osaka: {
    name: "osaka",
    comment: "Next feature hardfork after prague, internally used for verkle testing/implementation (incomplete/experimental)",
    url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/osaka.md",
    status: Status2.Draft,
    eips: [2935, 6800]
  }
};

// node_modules/@ethereumjs/common/dist/esm/utils.js
function formatNonce(nonce) {
  if (!nonce || nonce === "0x0") {
    return "0x0000000000000000";
  }
  if (isHexString(nonce)) {
    return `0x${stripHexPrefix(nonce).padStart(16, "0")}`;
  }
  return `0x${nonce.padStart(16, "0")}`;
}
function parseGethParams(json, mergeForkIdPostMerge = true) {
  const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, excessBlobGas, extraData: unparsedExtraData, nonce: unparsedNonce, timestamp: unparsedTimestamp } = json;
  const genesisTimestamp = Number(unparsedTimestamp);
  const { chainId, depositContractAddress } = config;
  const extraData = unparsedExtraData === "" ? "0x" : unparsedExtraData;
  const timestamp = isHexString(unparsedTimestamp) ? unparsedTimestamp : intToHex(parseInt(unparsedTimestamp));
  const nonce = unparsedNonce.length !== 18 ? formatNonce(unparsedNonce) : unparsedNonce;
  if (config.eip155Block !== config.eip158Block) {
    throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");
  }
  const params = {
    name,
    chainId,
    networkId: chainId,
    depositContractAddress,
    genesis: {
      timestamp,
      gasLimit,
      difficulty,
      nonce,
      extraData,
      mixHash,
      coinbase,
      baseFeePerGas,
      excessBlobGas
    },
    hardfork: void 0,
    hardforks: [],
    bootstrapNodes: [],
    consensus: config.clique !== void 0 ? {
      type: "poa",
      algorithm: "clique",
      clique: {
        // The recent geth genesis seems to be using blockperiodseconds
        // and epochlength for clique specification
        // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
        period: config.clique.period ?? config.clique.blockperiodseconds,
        epoch: config.clique.epoch ?? config.clique.epochlength
      }
    } : {
      type: "pow",
      algorithm: "ethash",
      ethash: {}
    }
  };
  const forkMap = {
    [Hardfork.Homestead]: { name: "homesteadBlock" },
    [Hardfork.Dao]: { name: "daoForkBlock" },
    [Hardfork.TangerineWhistle]: { name: "eip150Block" },
    [Hardfork.SpuriousDragon]: { name: "eip155Block" },
    [Hardfork.Byzantium]: { name: "byzantiumBlock" },
    [Hardfork.Constantinople]: { name: "constantinopleBlock" },
    [Hardfork.Petersburg]: { name: "petersburgBlock" },
    [Hardfork.Istanbul]: { name: "istanbulBlock" },
    [Hardfork.MuirGlacier]: { name: "muirGlacierBlock" },
    [Hardfork.Berlin]: { name: "berlinBlock" },
    [Hardfork.London]: { name: "londonBlock" },
    [Hardfork.MergeForkIdTransition]: { name: "mergeForkBlock", postMerge: mergeForkIdPostMerge },
    [Hardfork.Shanghai]: { name: "shanghaiTime", postMerge: true, isTimestamp: true },
    [Hardfork.Cancun]: { name: "cancunTime", postMerge: true, isTimestamp: true },
    [Hardfork.Prague]: { name: "pragueTime", postMerge: true, isTimestamp: true },
    [Hardfork.Osaka]: { name: "osakaTime", postMerge: true, isTimestamp: true }
  };
  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
    acc[forkMap[elem].name] = elem;
    return acc;
  }, {});
  const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== void 0 && config[key] !== void 0 && config[key] !== null);
  params.hardforks = configHardforkNames.map((nameBlock) => ({
    name: forkMapRev[nameBlock],
    block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== "number" ? null : config[nameBlock],
    timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === "number" ? config[nameBlock] : void 0
  })).filter((fork) => fork.block !== null || fork.timestamp !== void 0);
  params.hardforks.sort(function(a, b) {
    return (a.block ?? Infinity) - (b.block ?? Infinity);
  });
  params.hardforks.sort(function(a, b) {
    return (a.timestamp ?? 0) - (b.timestamp ?? 0);
  });
  for (const hf of params.hardforks) {
    if (hf.timestamp === genesisTimestamp) {
      hf.timestamp = 0;
    }
  }
  if (config.terminalTotalDifficulty !== void 0) {
    const mergeConfig = {
      name: Hardfork.Paris,
      ttd: config.terminalTotalDifficulty,
      block: null
    };
    const postMergeIndex = params.hardforks.findIndex((hf) => {
      var _a;
      return ((_a = forkMap[hf.name]) == null ? void 0 : _a.postMerge) === true;
    });
    if (postMergeIndex !== -1) {
      params.hardforks.splice(postMergeIndex, 0, mergeConfig);
    } else {
      params.hardforks.push(mergeConfig);
    }
  }
  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : void 0;
  params.hardfork = latestHardfork == null ? void 0 : latestHardfork.name;
  params.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });
  return params;
}
function parseGethGenesis(json, name, mergeForkIdPostMerge) {
  try {
    const required = ["config", "difficulty", "gasLimit", "nonce", "alloc"];
    if (required.some((field) => !(field in json))) {
      const missingField = required.filter((field) => !(field in json));
      throw new Error(`Invalid format, expected geth genesis field "${missingField}" missing`);
    }
    const finalJson = { ...json };
    if (name !== void 0) {
      finalJson.name = name;
    }
    return parseGethParams(finalJson, mergeForkIdPostMerge);
  } catch (e) {
    throw new Error(`Error parsing parameters file: ${e.message}`);
  }
}

// node_modules/@ethereumjs/common/dist/esm/common.js
var Common = class _Common {
  constructor(opts) {
    this._eips = [];
    this._paramsCache = {};
    this._activatedEIPsCache = [];
    this.events = new import_events.EventEmitter();
    this._customChains = opts.customChains ?? [];
    this._chainParams = this.setChain(opts.chain);
    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Shanghai;
    this.HARDFORK_CHANGES = this.hardforks().map((hf) => [
      hf.name,
      hardforks[hf.name] ?? (this._chainParams.customHardforks && this._chainParams.customHardforks[hf.name])
    ]);
    this._hardfork = this.DEFAULT_HARDFORK;
    if (opts.hardfork !== void 0) {
      this.setHardfork(opts.hardfork);
    }
    if (opts.eips) {
      this.setEIPs(opts.eips);
    }
    this.customCrypto = opts.customCrypto ?? {};
    if (Object.keys(this._paramsCache).length === 0) {
      this._buildParamsCache();
      this._buildActivatedEIPsCache();
    }
  }
  /**
   * Creates a {@link Common} object for a custom chain, based on a standard one.
   *
   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
   * in a provided {@link chainParamsOrName} dictionary. Some usage example:
   *
   * ```javascript
   * Common.custom({chainId: 123})
   * ```
   *
   * There are also selected supported custom chains which can be initialized by using one of the
   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
   *
   * ```javascript
   * Common.custom(CustomChains.MaticMumbai)
   * ```
   *
   * Note that these supported custom chains only provide some base parameters (usually the chain and
   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
   * the `@ethereumjs/tx` library to a Layer-2 chain).
   *
   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
   */
  static custom(chainParamsOrName, opts = {}) {
    const baseChain = opts.baseChain ?? "mainnet";
    const standardChainParams = { ..._Common._getChainParams(baseChain) };
    standardChainParams["name"] = "custom-chain";
    if (typeof chainParamsOrName !== "string") {
      return new _Common({
        chain: {
          ...standardChainParams,
          ...chainParamsOrName
        },
        ...opts
      });
    } else {
      if (chainParamsOrName === CustomChain.PolygonMainnet) {
        return _Common.custom({
          name: CustomChain.PolygonMainnet,
          chainId: 137,
          networkId: 137
        }, opts);
      }
      if (chainParamsOrName === CustomChain.PolygonMumbai) {
        return _Common.custom({
          name: CustomChain.PolygonMumbai,
          chainId: 80001,
          networkId: 80001
        }, opts);
      }
      if (chainParamsOrName === CustomChain.ArbitrumOne) {
        return _Common.custom({
          name: CustomChain.ArbitrumOne,
          chainId: 42161,
          networkId: 42161
        }, opts);
      }
      if (chainParamsOrName === CustomChain.xDaiChain) {
        return _Common.custom({
          name: CustomChain.xDaiChain,
          chainId: 100,
          networkId: 100
        }, opts);
      }
      if (chainParamsOrName === CustomChain.OptimisticKovan) {
        return _Common.custom({
          name: CustomChain.OptimisticKovan,
          chainId: 69,
          networkId: 69
        }, opts);
      }
      if (chainParamsOrName === CustomChain.OptimisticEthereum) {
        return _Common.custom(
          {
            name: CustomChain.OptimisticEthereum,
            chainId: 10,
            networkId: 10
          },
          // Optimism has not implemented the London hardfork yet (targeting Q1.22)
          { hardfork: Hardfork.Berlin, ...opts }
        );
      }
      throw new Error(`Custom chain ${chainParamsOrName} not supported`);
    }
  }
  /**
   * Static method to load and set common from a geth genesis json
   * @param genesisJson json of geth configuration
   * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
   * @returns Common
   */
  static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge, customCrypto }) {
    const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);
    const common = new _Common({
      chain: genesisParams.name ?? "custom",
      customChains: [genesisParams],
      eips,
      hardfork: hardfork ?? genesisParams.hardfork,
      customCrypto
    });
    if (genesisHash !== void 0) {
      common.setForkHashes(genesisHash);
    }
    return common;
  }
  /**
   * Static method to determine if a {@link chainId} is supported as a standard chain
   * @param chainId bigint id (`1`) of a standard chain
   * @returns boolean
   */
  static isSupportedChainId(chainId) {
    const initializedChains = this.getInitializedChains();
    return Boolean(initializedChains["names"][chainId.toString()]);
  }
  static _getChainParams(chain, customChains) {
    const initializedChains = this.getInitializedChains(customChains);
    if (typeof chain === "number" || typeof chain === "bigint") {
      chain = chain.toString();
      if (initializedChains["names"][chain]) {
        const name = initializedChains["names"][chain];
        return initializedChains[name];
      }
      throw new Error(`Chain with ID ${chain} not supported`);
    }
    if (initializedChains[chain] !== void 0) {
      return initializedChains[chain];
    }
    throw new Error(`Chain with name ${chain} not supported`);
  }
  /**
   * Sets the chain
   * @param chain String ('mainnet') or Number (1) chain representation.
   *              Or, a Dictionary of chain parameters for a private network.
   * @returns The dictionary with parameters set as chain
   */
  setChain(chain) {
    if (typeof chain === "number" || typeof chain === "bigint" || typeof chain === "string") {
      this._chainParams = _Common._getChainParams(chain, this._customChains);
    } else if (typeof chain === "object") {
      if (this._customChains.length > 0) {
        throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");
      }
      const required = ["networkId", "genesis", "hardforks", "bootstrapNodes"];
      for (const param of required) {
        if (!(param in chain)) {
          throw new Error(`Missing required chain parameter: ${param}`);
        }
      }
      this._chainParams = chain;
    } else {
      throw new Error("Wrong input format");
    }
    for (const hf of this.hardforks()) {
      if (hf.block === void 0) {
        throw new Error(`Hardfork cannot have undefined block number`);
      }
    }
    return this._chainParams;
  }
  /**
   * Sets the hardfork to get params for
   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
   */
  setHardfork(hardfork) {
    let existing = false;
    for (const hfChanges of this.HARDFORK_CHANGES) {
      if (hfChanges[0] === hardfork) {
        if (this._hardfork !== hardfork) {
          this._hardfork = hardfork;
          this._buildParamsCache();
          this._buildActivatedEIPsCache();
          this.events.emit("hardforkChanged", hardfork);
        }
        existing = true;
      }
    }
    if (!existing) {
      throw new Error(`Hardfork with name ${hardfork} not supported`);
    }
  }
  /**
   * Returns the hardfork either based on block numer (older HFs) or
   * timestamp (Shanghai upwards).
   *
   * An optional TD takes precedence in case the corresponding HF block
   * is set to `null` or otherwise needs to match (if not an error
   * will be thrown).
   *
   * @param Opts Block number, timestamp or TD (all optional)
   * @returns The name of the HF
   */
  getHardforkBy(opts) {
    const blockNumber = toType(opts.blockNumber, TypeOutput.BigInt);
    const td = toType(opts.td, TypeOutput.BigInt);
    const timestamp = toType(opts.timestamp, TypeOutput.BigInt);
    const hfs = this.hardforks().filter((hf) => hf.block !== null || hf.ttd !== null && hf.ttd !== void 0 || hf.timestamp !== void 0);
    const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== void 0);
    const doubleTTDHF = hfs.slice(mergeIndex + 1).findIndex((hf) => hf.ttd !== null && hf.ttd !== void 0);
    if (doubleTTDHF >= 0) {
      throw Error(`More than one merge hardforks found with ttd specified`);
    }
    let hfIndex = hfs.findIndex((hf) => blockNumber !== void 0 && hf.block !== null && BigInt(hf.block) > blockNumber || timestamp !== void 0 && hf.timestamp !== void 0 && BigInt(hf.timestamp) > timestamp);
    if (hfIndex === -1) {
      hfIndex = hfs.length;
    } else if (hfIndex === 0) {
      throw Error("Must have at least one hardfork at block 0");
    }
    if (timestamp === void 0) {
      const stepBack = hfs.slice(0, hfIndex).reverse().findIndex((hf) => hf.block !== null || hf.ttd !== void 0);
      hfIndex = hfIndex - stepBack;
    }
    hfIndex = hfIndex - 1;
    if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === void 0) {
      if (td === void 0 || td === null || BigInt(hfs[hfIndex].ttd) > td) {
        hfIndex -= 1;
      }
    } else {
      if (mergeIndex >= 0 && td !== void 0 && td !== null) {
        if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {
          throw Error("Maximum HF determined by total difficulty is lower than the block number HF");
        } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) < td) {
          throw Error("HF determined by block number is lower than the minimum total difficulty HF");
        }
      }
    }
    const hfStartIndex = hfIndex;
    for (; hfIndex < hfs.length - 1; hfIndex++) {
      if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {
        break;
      }
    }
    if (timestamp !== void 0) {
      const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf) => Math.max(Number(hf.timestamp ?? "0"), acc), 0);
      if (minTimeStamp > timestamp) {
        throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
      }
      const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), Number(timestamp));
      if (maxTimeStamp < timestamp) {
        throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
      }
    }
    const hardfork = hfs[hfIndex];
    return hardfork.name;
  }
  /**
   * Sets a new hardfork either based on block numer (older HFs) or
   * timestamp (Shanghai upwards).
   *
   * An optional TD takes precedence in case the corresponding HF block
   * is set to `null` or otherwise needs to match (if not an error
   * will be thrown).
   *
   * @param Opts Block number, timestamp or TD (all optional)
   * @returns The name of the HF set
   */
  setHardforkBy(opts) {
    const hardfork = this.getHardforkBy(opts);
    this.setHardfork(hardfork);
    return hardfork;
  }
  /**
   * Internal helper function, returns the params for the given hardfork for the chain set
   * @param hardfork Hardfork name
   * @returns Dictionary with hardfork params or null if hardfork not on chain
   */
  _getHardfork(hardfork) {
    const hfs = this.hardforks();
    for (const hf of hfs) {
      if (hf["name"] === hardfork)
        return hf;
    }
    return null;
  }
  /**
   * Sets the active EIPs
   * @param eips
   */
  setEIPs(eips = []) {
    for (const eip of eips) {
      if (!(eip in EIPs)) {
        throw new Error(`${eip} not supported`);
      }
      const minHF = this.gteHardfork(EIPs[eip]["minimumHardfork"]);
      if (!minHF) {
        throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
      }
    }
    this._eips = eips;
    this._buildParamsCache();
    this._buildActivatedEIPsCache();
    for (const eip of eips) {
      if (EIPs[eip].requiredEIPs !== void 0) {
        for (const elem of EIPs[eip].requiredEIPs) {
          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);
          }
        }
      }
    }
  }
  /**
   * Internal helper for _buildParamsCache()
   */
  _mergeWithParamsCache(params) {
    this._paramsCache["gasConfig"] = {
      ...this._paramsCache["gasConfig"],
      ...params["gasConfig"]
    };
    this._paramsCache["gasPrices"] = {
      ...this._paramsCache["gasPrices"],
      ...params["gasPrices"]
    };
    this._paramsCache["pow"] = {
      ...this._paramsCache["pow"],
      ...params["pow"]
    };
    this._paramsCache["sharding"] = {
      ...this._paramsCache["sharding"],
      ...params["sharding"]
    };
    this._paramsCache["vm"] = {
      ...this._paramsCache["vm"],
      ...params["vm"]
    };
  }
  /**
   * Build up a cache for all parameter values for the current HF and all activated EIPs
   */
  _buildParamsCache() {
    this._paramsCache = {};
    const hardfork = this.hardfork();
    for (const hfChanges of this.HARDFORK_CHANGES) {
      if ("eips" in hfChanges[1]) {
        const hfEIPs = hfChanges[1]["eips"];
        for (const eip of hfEIPs) {
          if (!(eip in EIPs)) {
            throw new Error(`${eip} not supported`);
          }
          this._mergeWithParamsCache(EIPs[eip]);
        }
      } else {
        this._mergeWithParamsCache(hfChanges[1]);
      }
      if (hfChanges[0] === hardfork)
        break;
    }
    for (const eip of this._eips) {
      if (!(eip in EIPs)) {
        throw new Error(`${eip} not supported`);
      }
      this._mergeWithParamsCache(EIPs[eip]);
    }
  }
  _buildActivatedEIPsCache() {
    this._activatedEIPsCache = [];
    for (const hfChanges of this.HARDFORK_CHANGES) {
      const hf = hfChanges[1];
      if (this.gteHardfork(hf["name"]) && "eips" in hf) {
        this._activatedEIPsCache = this._activatedEIPsCache.concat(hf["eips"]);
      }
    }
    this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);
  }
  /**
   * Returns a parameter for the current chain setup
   *
   * If the parameter is present in an EIP, the EIP always takes precedence.
   * Otherwise the parameter is taken from the latest applied HF with
   * a change on the respective parameter.
   *
   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
   * @returns The value requested or `BigInt(0)` if not found
   */
  param(topic, name) {
    let value = null;
    if (this._paramsCache[topic] !== void 0 && this._paramsCache[topic][name] !== void 0) {
      value = this._paramsCache[topic][name].v;
    }
    return BigInt(value ?? 0);
  }
  /**
   * Returns the parameter corresponding to a hardfork
   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
   * @param hardfork Hardfork name
   * @returns The value requested or `BigInt(0)` if not found
   */
  paramByHardfork(topic, name, hardfork) {
    let value = null;
    for (const hfChanges of this.HARDFORK_CHANGES) {
      if ("eips" in hfChanges[1]) {
        const hfEIPs = hfChanges[1]["eips"];
        for (const eip of hfEIPs) {
          const valueEIP = this.paramByEIP(topic, name, eip);
          value = typeof valueEIP === "bigint" ? valueEIP : value;
        }
      } else {
        if (hfChanges[1][topic] !== void 0 && hfChanges[1][topic][name] !== void 0) {
          value = hfChanges[1][topic][name].v;
        }
      }
      if (hfChanges[0] === hardfork)
        break;
    }
    return BigInt(value ?? 0);
  }
  /**
   * Returns a parameter corresponding to an EIP
   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
   * @param eip Number of the EIP
   * @returns The value requested or `undefined` if not found
   */
  paramByEIP(topic, name, eip) {
    if (!(eip in EIPs)) {
      throw new Error(`${eip} not supported`);
    }
    const eipParams = EIPs[eip];
    if (!(topic in eipParams)) {
      return void 0;
    }
    if (eipParams[topic][name] === void 0) {
      return void 0;
    }
    const value = eipParams[topic][name].v;
    return BigInt(value);
  }
  /**
   * Returns a parameter for the hardfork active on block number or
   * optional provided total difficulty (Merge HF)
   * @param topic Parameter topic
   * @param name Parameter name
   * @param blockNumber Block number
   * @param td Total difficulty
   *    * @returns The value requested or `BigInt(0)` if not found
   */
  paramByBlock(topic, name, blockNumber, td, timestamp) {
    const hardfork = this.getHardforkBy({ blockNumber, td, timestamp });
    return this.paramByHardfork(topic, name, hardfork);
  }
  /**
   * Checks if an EIP is activated by either being included in the EIPs
   * manually passed in with the {@link CommonOpts.eips} or in a
   * hardfork currently being active
   *
   * Note: this method only works for EIPs being supported
   * by the {@link CommonOpts.eips} constructor option
   * @param eip
   */
  isActivatedEIP(eip) {
    if (this._activatedEIPsCache.includes(eip)) {
      return true;
    }
    return false;
  }
  /**
   * Checks if set or provided hardfork is active on block number
   * @param hardfork Hardfork name or null (for HF set)
   * @param blockNumber
   * @returns True if HF is active on block number
   */
  hardforkIsActiveOnBlock(hardfork, blockNumber) {
    blockNumber = toType(blockNumber, TypeOutput.BigInt);
    hardfork = hardfork ?? this._hardfork;
    const hfBlock = this.hardforkBlock(hardfork);
    if (typeof hfBlock === "bigint" && hfBlock !== BIGINT_0 && blockNumber >= hfBlock) {
      return true;
    }
    return false;
  }
  /**
   * Alias to hardforkIsActiveOnBlock when hardfork is set
   * @param blockNumber
   * @returns True if HF is active on block number
   */
  activeOnBlock(blockNumber) {
    return this.hardforkIsActiveOnBlock(null, blockNumber);
  }
  /**
   * Sequence based check if given or set HF1 is greater than or equal HF2
   * @param hardfork1 Hardfork name or null (if set)
   * @param hardfork2 Hardfork name
   * @param opts Hardfork options
   * @returns True if HF1 gte HF2
   */
  hardforkGteHardfork(hardfork1, hardfork2) {
    hardfork1 = hardfork1 ?? this._hardfork;
    const hardforks2 = this.hardforks();
    let posHf1 = -1, posHf2 = -1;
    let index = 0;
    for (const hf of hardforks2) {
      if (hf["name"] === hardfork1)
        posHf1 = index;
      if (hf["name"] === hardfork2)
        posHf2 = index;
      index += 1;
    }
    return posHf1 >= posHf2 && posHf2 !== -1;
  }
  /**
   * Alias to hardforkGteHardfork when hardfork is set
   * @param hardfork Hardfork name
   * @returns True if hardfork set is greater than hardfork provided
   */
  gteHardfork(hardfork) {
    return this.hardforkGteHardfork(null, hardfork);
  }
  /**
   * Returns the hardfork change block for hardfork provided or set
   * @param hardfork Hardfork name, optional if HF set
   * @returns Block number or null if unscheduled
   */
  hardforkBlock(hardfork) {
    var _a;
    hardfork = hardfork ?? this._hardfork;
    const block = (_a = this._getHardfork(hardfork)) == null ? void 0 : _a["block"];
    if (block === void 0 || block === null) {
      return null;
    }
    return BigInt(block);
  }
  hardforkTimestamp(hardfork) {
    var _a;
    hardfork = hardfork ?? this._hardfork;
    const timestamp = (_a = this._getHardfork(hardfork)) == null ? void 0 : _a["timestamp"];
    if (timestamp === void 0 || timestamp === null) {
      return null;
    }
    return BigInt(timestamp);
  }
  /**
   * Returns the hardfork change block for eip
   * @param eip EIP number
   * @returns Block number or null if unscheduled
   */
  eipBlock(eip) {
    for (const hfChanges of this.HARDFORK_CHANGES) {
      const hf = hfChanges[1];
      if ("eips" in hf) {
        if (hf["eips"].includes(eip)) {
          return this.hardforkBlock(hfChanges[0]);
        }
      }
    }
    return null;
  }
  /**
   * Returns the scheduled timestamp of the EIP (if scheduled and scheduled by timestamp)
   * @param eip EIP number
   * @returns Scheduled timestamp. If this EIP is unscheduled, or the EIP is scheduled by block number or ttd, then it returns `null`.
   */
  eipTimestamp(eip) {
    for (const hfChanges of this.HARDFORK_CHANGES) {
      const hf = hfChanges[1];
      if ("eips" in hf) {
        if (hf["eips"].includes(eip)) {
          return this.hardforkTimestamp(hfChanges[0]);
        }
      }
    }
    return null;
  }
  /**
   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
   * @param hardfork Hardfork name, optional if HF set
   * @returns Total difficulty or null if no set
   */
  hardforkTTD(hardfork) {
    var _a;
    hardfork = hardfork ?? this._hardfork;
    const ttd = (_a = this._getHardfork(hardfork)) == null ? void 0 : _a["ttd"];
    if (ttd === void 0 || ttd === null) {
      return null;
    }
    return BigInt(ttd);
  }
  /**
   * Returns the change block for the next hardfork after the hardfork provided or set
   * @param hardfork Hardfork name, optional if HF set
   * @returns Block timestamp, number or null if not available
   */
  nextHardforkBlockOrTimestamp(hardfork) {
    hardfork = hardfork ?? this._hardfork;
    const hfs = this.hardforks();
    let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);
    if (hardfork === Hardfork.Paris) {
      hfIndex -= 1;
    }
    if (hfIndex < 0) {
      return null;
    }
    let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;
    currHfTimeOrBlock = currHfTimeOrBlock !== null && currHfTimeOrBlock !== void 0 ? Number(currHfTimeOrBlock) : null;
    const nextHf = hfs.slice(hfIndex + 1).find((hf) => {
      let hfTimeOrBlock = hf.timestamp ?? hf.block;
      hfTimeOrBlock = hfTimeOrBlock !== null && hfTimeOrBlock !== void 0 ? Number(hfTimeOrBlock) : null;
      return hf.name !== Hardfork.Paris && hfTimeOrBlock !== null && hfTimeOrBlock !== void 0 && hfTimeOrBlock !== currHfTimeOrBlock;
    });
    if (nextHf === void 0) {
      return null;
    }
    const nextHfBlock = nextHf.timestamp ?? nextHf.block;
    if (nextHfBlock === null || nextHfBlock === void 0) {
      return null;
    }
    return BigInt(nextHfBlock);
  }
  /**
   * Internal helper function to calculate a fork hash
   * @param hardfork Hardfork name
   * @param genesisHash Genesis block hash of the chain
   * @returns Fork hash as hex string
   */
  _calcForkHash(hardfork, genesisHash) {
    let hfBytes = new Uint8Array(0);
    let prevBlockOrTime = 0;
    for (const hf of this.hardforks()) {
      const { block, timestamp, name } = hf;
      let blockOrTime = timestamp ?? block;
      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
      if (typeof blockOrTime === "number" && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== Hardfork.Paris) {
        const hfBlockBytes = hexToBytes(`0x${blockOrTime.toString(16).padStart(16, "0")}`);
        hfBytes = concatBytes(hfBytes, hfBlockBytes);
        prevBlockOrTime = blockOrTime;
      }
      if (hf.name === hardfork)
        break;
    }
    const inputBytes = concatBytes(genesisHash, hfBytes);
    const forkhash = bytesToHex(intToBytes(crc32(inputBytes) >>> 0));
    return forkhash;
  }
  /**
   * Returns an eth/64 compliant fork hash (EIP-2124)
   * @param hardfork Hardfork name, optional if HF set
   * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
   */
  forkHash(hardfork, genesisHash) {
    hardfork = hardfork ?? this._hardfork;
    const data = this._getHardfork(hardfork);
    if (data === null || (data == null ? void 0 : data.block) === null && (data == null ? void 0 : data.timestamp) === void 0 && (data == null ? void 0 : data.ttd) === void 0) {
      const msg = "No fork hash calculation possible for future hardfork";
      throw new Error(msg);
    }
    if ((data == null ? void 0 : data.forkHash) !== null && (data == null ? void 0 : data.forkHash) !== void 0) {
      return data.forkHash;
    }
    if (!genesisHash)
      throw new Error("genesisHash required for forkHash calculation");
    return this._calcForkHash(hardfork, genesisHash);
  }
  /**
   *
   * @param forkHash Fork hash as a hex string
   * @returns Array with hardfork data (name, block, forkHash)
   */
  hardforkForForkHash(forkHash) {
    const resArray = this.hardforks().filter((hf) => {
      return hf.forkHash === forkHash;
    });
    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
  }
  /**
   * Sets any missing forkHashes on the passed-in {@link Common} instance
   * @param common The {@link Common} to set the forkHashes for
   * @param genesisHash The genesis block hash
   */
  setForkHashes(genesisHash) {
    for (const hf of this.hardforks()) {
      const blockOrTime = hf.timestamp ?? hf.block;
      if ((hf.forkHash === null || hf.forkHash === void 0) && (blockOrTime !== null && blockOrTime !== void 0 || typeof hf.ttd !== "undefined")) {
        hf.forkHash = this.forkHash(hf.name, genesisHash);
      }
    }
  }
  /**
   * Returns the Genesis parameters of the current chain
   * @returns Genesis dictionary
   */
  genesis() {
    return this._chainParams.genesis;
  }
  /**
   * Returns the hardforks for current chain
   * @returns {Array} Array with arrays of hardforks
   */
  hardforks() {
    const hfs = this._chainParams.hardforks;
    if (this._chainParams.customHardforks !== void 0) {
      this._chainParams.customHardforks;
    }
    return hfs;
  }
  /**
   * Returns bootstrap nodes for the current chain
   * @returns {Dictionary} Dict with bootstrap nodes
   */
  bootstrapNodes() {
    return this._chainParams.bootstrapNodes;
  }
  /**
   * Returns DNS networks for the current chain
   * @returns {String[]} Array of DNS ENR urls
   */
  dnsNetworks() {
    return this._chainParams.dnsNetworks;
  }
  /**
   * Returns the hardfork set
   * @returns Hardfork name
   */
  hardfork() {
    return this._hardfork;
  }
  /**
   * Returns the Id of current chain
   * @returns chain Id
   */
  chainId() {
    return BigInt(this._chainParams.chainId);
  }
  /**
   * Returns the name of current chain
   * @returns chain name (lower case)
   */
  chainName() {
    return this._chainParams.name;
  }
  /**
   * Returns the Id of current network
   * @returns network Id
   */
  networkId() {
    return BigInt(this._chainParams.networkId);
  }
  /**
   * Returns the additionally activated EIPs
   * (by using the `eips` constructor option)
   * @returns List of EIPs
   */
  eips() {
    return this._eips;
  }
  /**
   * Returns the consensus type of the network
   * Possible values: "pow"|"poa"|"pos"
   *
   * Note: This value can update along a Hardfork.
   */
  consensusType() {
    const hardfork = this.hardfork();
    let value;
    for (const hfChanges of this.HARDFORK_CHANGES) {
      if ("consensus" in hfChanges[1]) {
        value = hfChanges[1]["consensus"]["type"];
      }
      if (hfChanges[0] === hardfork)
        break;
    }
    return value ?? this._chainParams["consensus"]["type"];
  }
  /**
   * Returns the concrete consensus implementation
   * algorithm or protocol for the network
   * e.g. "ethash" for "pow" consensus type,
   * "clique" for "poa" consensus type or
   * "casper" for "pos" consensus type.
   *
   * Note: This value can update along a Hardfork.
   */
  consensusAlgorithm() {
    const hardfork = this.hardfork();
    let value;
    for (const hfChanges of this.HARDFORK_CHANGES) {
      if ("consensus" in hfChanges[1]) {
        value = hfChanges[1]["consensus"]["algorithm"];
      }
      if (hfChanges[0] === hardfork)
        break;
    }
    return value ?? this._chainParams["consensus"]["algorithm"];
  }
  /**
   * Returns a dictionary with consensus configuration
   * parameters based on the consensus algorithm
   *
   * Expected returns (parameters must be present in
   * the respective chain json files):
   *
   * ethash: empty object
   * clique: period, epoch
   * casper: empty object
   *
   * Note: This value can update along a Hardfork.
   */
  consensusConfig() {
    const hardfork = this.hardfork();
    let value;
    for (const hfChanges of this.HARDFORK_CHANGES) {
      if ("consensus" in hfChanges[1]) {
        const config = hfChanges[1];
        const algorithm = config["consensus"]["algorithm"];
        value = config["consensus"][algorithm];
      }
      if (hfChanges[0] === hardfork)
        break;
    }
    return value ?? this._chainParams["consensus"][this.consensusAlgorithm()] ?? {};
  }
  /**
   * Returns a deep copy of this {@link Common} instance.
   */
  copy() {
    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
    copy.events = new import_events.EventEmitter();
    return copy;
  }
  static getInitializedChains(customChains) {
    const names = {};
    for (const [name, id] of Object.entries(Chain)) {
      names[id] = name.toLowerCase();
    }
    const chains2 = { ...chains };
    if (customChains) {
      for (const chain of customChains) {
        const { name } = chain;
        names[chain.chainId.toString()] = name;
        chains2[name] = chain;
      }
    }
    chains2.names = names;
    return chains2;
  }
};

export {
  Chain,
  ChainGenesis,
  Hardfork,
  ConsensusType,
  ConsensusAlgorithm,
  CustomChain,
  parseGethGenesis,
  Common
};
//# sourceMappingURL=chunk-765BEDJH.js.map
