import {
  require_react
} from "./chunk-7SNDHR3H.js";
import {
  EVM_PLUGINS,
  PLUGIN_EVENTS,
  WalletInitializationError,
  WalletServicesPluginError
} from "./chunk-K4C2RABW.js";
import "./chunk-GJBZJ4UL.js";
import "./chunk-MBKDGBSM.js";
import "./chunk-ATDVI3CM.js";
import "./chunk-CFIX2DL5.js";
import {
  __toESM
} from "./chunk-256EKJAK.js";

// node_modules/@web3auth/wallet-services-plugin-react-hooks/dist/walletServicesPluginReactHooks.esm.js
var import_react = __toESM(require_react());
var WalletServicesContext = (0, import_react.createContext)(null);
function WalletServicesContextProvider({
  children,
  context
}) {
  const [isPluginConnected, setIsPluginConnected] = (0, import_react.useState)(false);
  const [walletServicesPlugin, setWalletServicesPlugin] = (0, import_react.useState)(null);
  const web3AuthContext = (0, import_react.useContext)(context);
  (0, import_react.useEffect)(() => {
    const connectedListener = () => {
      setIsPluginConnected(true);
    };
    const disconnectedListener = () => {
      setIsPluginConnected(false);
    };
    const {
      getPlugin,
      isInitialized
    } = web3AuthContext;
    if (isInitialized) {
      const plugin = getPlugin(EVM_PLUGINS.WALLET_SERVICES);
      setWalletServicesPlugin(plugin);
    }
    if (walletServicesPlugin) {
      walletServicesPlugin.on(PLUGIN_EVENTS.CONNECTED, connectedListener);
      walletServicesPlugin.on(PLUGIN_EVENTS.DISCONNECTED, disconnectedListener);
    }
    return () => {
      if (walletServicesPlugin) {
        walletServicesPlugin.off(PLUGIN_EVENTS.CONNECTED, connectedListener);
        walletServicesPlugin.off(PLUGIN_EVENTS.DISCONNECTED, disconnectedListener);
      }
    };
  }, [walletServicesPlugin, web3AuthContext]);
  const showWalletConnectScanner = (0, import_react.useCallback)(async () => {
    if (!walletServicesPlugin) throw WalletServicesPluginError.notInitialized();
    if (!isPluginConnected) throw WalletServicesPluginError.walletPluginNotConnected();
    return walletServicesPlugin.showWalletConnectScanner();
  }, [walletServicesPlugin, isPluginConnected]);
  const showWalletUI = (0, import_react.useCallback)(async () => {
    if (!walletServicesPlugin) throw WalletServicesPluginError.notInitialized();
    if (!isPluginConnected) throw WalletServicesPluginError.walletPluginNotConnected();
    return walletServicesPlugin.showWalletUi();
  }, [walletServicesPlugin, isPluginConnected]);
  const showCheckout = (0, import_react.useCallback)(async () => {
    if (!walletServicesPlugin) throw WalletServicesPluginError.notInitialized();
    if (!isPluginConnected) throw WalletServicesPluginError.walletPluginNotConnected();
    return walletServicesPlugin.showCheckout();
  }, [walletServicesPlugin, isPluginConnected]);
  const value = (0, import_react.useMemo)(() => {
    return {
      plugin: walletServicesPlugin,
      isPluginConnected,
      showWalletConnectScanner,
      showCheckout,
      showWalletUI
    };
  }, [walletServicesPlugin, isPluginConnected, showWalletConnectScanner, showCheckout, showWalletUI]);
  return (0, import_react.createElement)(WalletServicesContext.Provider, {
    value
  }, children);
}
var useWalletServicesPlugin = () => {
  const context = (0, import_react.useContext)(WalletServicesContext);
  if (!context) {
    throw WalletInitializationError.fromCode(1e3, "usage of useWalletServicesPlugin not wrapped in `WalletServicesContextProvider`.");
  }
  return context;
};
function WalletServicesProvider({
  children,
  context
}) {
  const wsElement = (0, import_react.createElement)(WalletServicesContextProvider, {
    context
  }, children);
  return wsElement;
}
export {
  WalletServicesContext,
  WalletServicesContextProvider,
  WalletServicesProvider,
  useWalletServicesPlugin
};
//# sourceMappingURL=@web3auth_wallet-services-plugin-react-hooks.js.map
