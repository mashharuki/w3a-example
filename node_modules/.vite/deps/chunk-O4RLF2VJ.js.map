{
  "version": 3,
  "sources": ["../../@web3auth/ethereum-provider/dist/ethereumProvider.esm.js"],
  "sourcesContent": ["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { stripHexPrefix, addHexPrefix, isValidAddress, privateToAddress, isHexString } from '@ethereumjs/util';\nimport { createScaffoldMiddleware, createAsyncMiddleware, rpcErrors, mergeMiddleware, providerErrors, JRPCEngine, providerFromEngine } from '@toruslabs/openlogin-jrpc';\nimport { isHexStrict, log, CHAIN_NAMESPACES, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { createFetchMiddleware, signMessage } from '@toruslabs/base-controllers';\nimport { TYPED_MESSAGE_SCHEMA, typedSignatureHash, personalSign, signTypedData } from '@metamask/eth-sig-util';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport BN from 'bn.js';\nimport { get } from '@toruslabs/http-helpers';\nimport assert from 'assert';\nimport jsonschema from 'jsonschema';\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\nfunction createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4\n}) {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw rpcErrors.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n    const msgParams = _objectSpread(_objectSpread({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n    const msgParams = _objectSpread(_objectSpread({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam = req.params[0];\n    const secondParam = req.params[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams = req.params[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address, message;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n    const msgParams = _objectSpread(_objectSpread({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw rpcErrors.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware({\n  addChain,\n  switchChain\n}) {\n  async function addNewChain(req, res) {\n    var _req$params;\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw rpcErrors.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req, res) {\n    var _req$params2;\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw rpcErrors.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\n\n// #region account middlewares\nfunction createAccountMiddleware({\n  updatePrivatekey\n}) {\n  async function updateAccount(req, res) {\n    var _req$params3;\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw rpcErrors.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n}\n\n// #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber = {\n  hex: n => typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16),\n  dec: n => new BigNumber(n, 10)\n};\nconst toNormalizedDenomination = {\n  WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n  WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP)\n};\nconst baseChange = {\n  hex: n => n.toString(16),\n  dec: n => new BigNumber(n).toString(10)\n};\nconst converter = params => {\n  const {\n    value,\n    fromNumericBase,\n    fromDenomination,\n    toNumericBase,\n    toDenomination,\n    numberOfDecimals\n  } = params;\n  let convertedValue = toBigNumber[fromNumericBase](value);\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\nconst conversionUtil = (value, {\n  fromNumericBase = \"hex\",\n  toNumericBase,\n  fromDenomination,\n  toDenomination,\n  numberOfDecimals\n}) => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\"\n  });\n};\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\nfunction hexToBn(inputHex) {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nlet SignTypedDataVersion = /*#__PURE__*/function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n  return SignTypedDataVersion;\n}({});\n\nfunction normalizeGWEIDecimalNumbers(n) {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex).toString();\n  return numberAsGWEI;\n}\nasync function fetchEip1159GasEstimates(url) {\n  const estimates = await get(url);\n  const normalizedEstimates = _objectSpread(_objectSpread({}, estimates), {}, {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: _objectSpread(_objectSpread({}, estimates.low), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n    }),\n    medium: _objectSpread(_objectSpread({}, estimates.medium), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n    }),\n    high: _objectSpread(_objectSpread({}, estimates.high), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n    })\n  });\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nasync function fetchLegacyGasPriceEstimates(url) {\n  const result = await get(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\"\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice\n  };\n}\nconst validateTypedMessageParams = async (parameters, activeChainId) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(typeof parameters.from === \"string\" && isValidAddress(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    let data = null;\n    let chainId = null;\n    switch (parameters.version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        {\n          var _typedData$domain;\n          if (typeof parameters.data === \"string\") {\n            assert.doesNotThrow(() => {\n              data = JSON.parse(parameters.data);\n            }, '\"data\" must be a valid JSON string.');\n          } else {\n            // for backward compatiblity we validate for both string and object type.\n            data = parameters.data;\n          }\n          const typedData = data;\n          assert.ok(typedData.primaryType in typedData.types, `Primary type of \"${typedData.primaryType}\" has no type definition.`);\n          const validation = jsonschema.validate(typedData, TYPED_MESSAGE_SCHEMA.properties);\n          assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n          chainId = (_typedData$domain = typedData.domain) === null || _typedData$domain === void 0 ? void 0 : _typedData$domain.chainId;\n          if (chainId) {\n            assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n            if (typeof chainId === \"string\") {\n              chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n            }\n            assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n          }\n          break;\n        }\n      default:\n        assert.fail(`Unknown typed data version \"${parameters.version}\"`);\n    }\n  } catch (error) {\n    throw rpcErrors.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nclass TransactionFormatter {\n  constructor({\n    getProviderEngineProxy\n  }) {\n    // https://0x.org/docs/introduction/0x-cheat-sheet#swap-api-endpoints\n    _defineProperty(this, \"API_SUPPORTED_CHAINIDS\", new Set([\"0x1\", \"0x5\", \"0x13881\", \"0xa4b1\", \"0xa86a\", \"0x2105\", \"0x38\", \"0xfa\", \"0xa\", \"0x89\"]));\n    _defineProperty(this, \"chainConfig\", null);\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n  async init() {\n    this.chainConfig = await this.providerProxy.request({\n      method: \"eth_provider_config\"\n    });\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n  async getCommonConfiguration() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const {\n      displayName: name,\n      chainId\n    } = this.chainConfig;\n    const {\n      Hardfork,\n      Common\n    } = await import('@ethereumjs/common');\n    const hardfork = this.isEIP1559Compatible ? Hardfork.Paris : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork\n    };\n    return Common.custom(customChainParams);\n  }\n  async formatTransaction(txParams) {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const clonedTxParams = _objectSpread({}, txParams);\n    if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n      method: \"eth_getTransactionCount\",\n      params: [txParams.from, \"latest\"]\n    });\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if user provides gas Limit, we should use it instead\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gasLimit) {\n        if (!clonedTxParams.gas) {\n          const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n          if (defaultGasLimit) {\n            clonedTxParams.gasLimit = defaultGasLimit;\n          }\n        } else {\n          clonedTxParams.gasLimit = clonedTxParams.gas;\n        }\n      }\n      return clonedTxParams;\n    }\n    if (!clonedTxParams.gasLimit) {\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n    }\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas\n    } = await this.getDefaultGasFees(clonedTxParams);\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice;\n    }\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n  async fetchEthGasPriceEstimate() {\n    const gasPrice = await this.providerProxy.request({\n      method: \"eth_gasPrice\",\n      params: []\n    });\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n    };\n  }\n  async fetchGasEstimatesViaEthFeeHistory() {\n    const noOfBlocks = 10;\n    const newestBlock = \"latest\";\n    // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks\n    const percentileValues = [10, 50, 95];\n    const feeHistory = await this.providerProxy.request({\n      method: \"eth_feeHistory\",\n      params: [noOfBlocks, newestBlock, percentileValues]\n    });\n\n    // this is in hex wei\n    const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n    // this is in hex wei\n    const priorityFeeCalcs = feeHistory.reward.reduce((acc, curr) => {\n      return {\n        slow: acc.slow.plus(new BigNumber(curr[0], 16)),\n        average: acc.average.plus(new BigNumber(curr[1], 16)),\n        fast: acc.fast.plus(new BigNumber(curr[2], 16))\n      };\n    }, {\n      slow: new BigNumber(0),\n      average: new BigNumber(0),\n      fast: new BigNumber(0)\n    });\n    return {\n      estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(),\n      high: {\n        maxWaitTimeEstimate: 30000,\n        minWaitTimeEstimate: 15000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.toString(16)).toString()\n      },\n      medium: {\n        maxWaitTimeEstimate: 45000,\n        minWaitTimeEstimate: 15000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.toString(16)).toString()\n      },\n      low: {\n        maxWaitTimeEstimate: 60000,\n        minWaitTimeEstimate: 15000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.toString(16)).toString()\n      }\n    };\n  }\n  async getEIP1559Compatibility() {\n    const latestBlock = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    return !!supportsEIP1559;\n  }\n  async fetchGasFeeEstimateData() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n    let gasData;\n    try {\n      if (this.isEIP1559Compatible) {\n        let estimates;\n        try {\n          if (this.API_SUPPORTED_CHAINIDS.has(this.chainConfig.chainId)) {\n            estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n          } else {\n            throw new Error(\"Chain id not supported by api\");\n          }\n        } catch (error) {\n          estimates = await this.fetchGasEstimatesViaEthFeeHistory();\n        }\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n        };\n      } catch (error) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${error.message}`);\n      }\n    }\n    return gasData;\n  }\n  async getDefaultGasFees(txParams) {\n    if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n      return {};\n    }\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType\n      } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const {\n          medium: {\n            suggestedMaxPriorityFeePerGas,\n            suggestedMaxFeePerGas\n          } = {}\n        } = gasFeeEstimates;\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.medium))\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n    const {\n      gasPrice\n    } = await this.fetchEthGasPriceEstimate();\n    return {\n      gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n    };\n  }\n  async estimateTxGas(txMeta) {\n    const txParams = _objectSpread({}, txMeta);\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = await this.providerProxy.request({\n      method: \"eth_estimateGas\",\n      params: [txParams]\n    });\n    return gas;\n  }\n  async analyzeGasUsage(txMeta) {\n    const block = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n    }\n    return {\n      blockGasLimit: block.gasLimit,\n      estimatedGasHex\n    };\n  }\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex, multiplier = 1.5) {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n  async determineTransactionCategory(txParameters) {\n    const {\n      data,\n      to\n    } = txParameters;\n    let code = \"\";\n    let txCategory;\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = await this.providerProxy.request({\n          method: \"eth_getCode\",\n          params: [to, \"latest\"]\n        });\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n    return {\n      transactionCategory: txCategory,\n      code\n    };\n  }\n  async getDefaultGasLimit(txParams) {\n    const {\n      transactionCategory\n    } = await this.determineTransactionCategory(_objectSpread({}, txParams));\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n      const TWENTY_ONE_THOUSAND = 21000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n    const {\n      blockGasLimit,\n      estimatedGasHex\n    } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n    return gasLimit;\n  }\n}\n\nasync function signTx(txParams, privKey, txFormatter) {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const {\n    TransactionFactory\n  } = await import('@ethereumjs/tx');\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return Buffer.from(signedTx);\n}\nfunction getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy\n}) {\n  return {\n    getAccounts: async _ => [`0x${Buffer.from(privateToAddress(Buffer.from(privKey, \"hex\"))).toString(\"hex\")}`],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = _objectSpread(_objectSpread({}, msgParams), {}, {\n        version: SignTypedDataVersion.V1\n      });\n      await validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      await validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      await validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    }\n  };\n}\n\nvar _EthereumPrivateKeyProvider;\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor({\n    config,\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"PROVIDER_CHAIN_NAMESPACE\", CHAIN_NAMESPACES.EIP155);\n  }\n  async enable() {\n    if (!this.state.privateKey) throw providerErrors.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(privKey) {\n    const {\n      chainNamespace\n    } = this.config.chainConfig;\n    if (chainNamespace !== this.PROVIDER_CHAIN_NAMESPACE) throw WalletInitializationError.incompatibleChainNameSpace(\"Invalid chain namespace\");\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw rpcErrors.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    const finalNetwork = isHexString(network) ? parseInt(network, 16) : parseInt(network, 10);\n    if (parseInt(chainId, 16) !== finalNetwork) throw providerErrors.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this.emit(\"chainChanged\", chainId);\n      this.emit(\"connect\", {\n        chainId\n      });\n    }\n    this.update({\n      chainId\n    });\n    return network;\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency,\n          iconUrls\n        } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorerUrl: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18,\n          logo: (iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0]) || \"https://images.toruswallet.io/eth.svg\"\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n_EthereumPrivateKeyProvider = EthereumPrivateKeyProvider;\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new _EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EIP1559APIEndpoint, EthereumPrivateKeyProvider, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, SignTypedDataVersion, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES, TransactionFormatter, createAccountMiddleware, createChainIdMiddleware, createChainSwitchMiddleware, createEthMiddleware, createJsonRpcClient, createProviderConfigMiddleware, createWalletMiddleware, fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates, getProviderHandlers, normalizeGWEIDecimalNumbers, validateTypedMessageParams };\n"],
  "mappings": "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",
  "names": ["signTypedData", "personalSign", "BN", "SignTypedDataVersion", "assert", "jsonschema"]
}
