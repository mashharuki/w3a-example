{
  "version": 3,
  "sources": ["../../@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js"],
  "sourcesContent": ["import { signChallenge, verifySignedChallenge } from '@toruslabs/base-controllers';\nimport { BaseAdapter, getChainConfig, CHAIN_NAMESPACES, ADAPTER_STATUS, WalletLoginError, getSavedToken, checkIfTokenIsExpired, saveToken, clearToken, ADAPTER_EVENTS } from '@web3auth/base';\n\nclass BaseEvmAdapter extends BaseAdapter {\n  async init(_) {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n  async authenticateUser() {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const hexChallenge = `0x${Buffer.from(challenge, \"utf8\").toString(\"hex\")}`;\n      const signedMessage = await this.provider.request({\n        method: \"personal_sign\",\n        params: [hexChallenge, accounts[0]]\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n  async disconnectSession() {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n  async disconnect() {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n\nexport { BaseEvmAdapter };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA,IAAM,iBAAN,cAA6B,YAAY;AAAA,EACvC,MAAM,KAAK,GAAG;AACZ,QAAI,CAAC,KAAK,YAAa,MAAK,cAAc,eAAe,iBAAiB,QAAQ,CAAC;AAAA,EACrF;AAAA,EACA,MAAM,mBAAmB;AACvB,QAAI,CAAC,KAAK,YAAY,KAAK,WAAW,eAAe,UAAW,OAAM,iBAAiB,kBAAkB;AACzG,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,KAAK;AACT,UAAM,WAAW,MAAM,KAAK,SAAS,QAAQ;AAAA,MAC3C,QAAQ;AAAA,IACV,CAAC;AACD,QAAI,YAAY,SAAS,SAAS,GAAG;AACnC,YAAM,gBAAgB,cAAc,SAAS,CAAC,GAAG,KAAK,IAAI;AAC1D,UAAI,eAAe;AACjB,cAAM,YAAY,sBAAsB,aAAa;AACrD,YAAI,CAAC,WAAW;AACd,iBAAO;AAAA,YACL,SAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AACA,YAAM,UAAU;AAAA,QACd,QAAQ,OAAO,SAAS;AAAA,QACxB,KAAK,OAAO,SAAS;AAAA,QACrB,SAAS,SAAS,CAAC;AAAA,QACnB,SAAS,SAAS,SAAS,EAAE;AAAA,QAC7B,SAAS;AAAA,QACT,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC;AAAA,QACzC,WAAU,oBAAI,KAAK,GAAE,YAAY;AAAA,MACnC;AACA,YAAM,YAAY,MAAM,cAAc,SAAS,cAAc;AAC7D,YAAM,eAAe,KAAK,OAAO,KAAK,WAAW,MAAM,EAAE,SAAS,KAAK,CAAC;AACxE,YAAM,gBAAgB,MAAM,KAAK,SAAS,QAAQ;AAAA,QAChD,QAAQ;AAAA,QACR,QAAQ,CAAC,cAAc,SAAS,CAAC,CAAC;AAAA,MACpC,CAAC;AACD,YAAM,UAAU,MAAM,sBAAsB,gBAAgB,eAAe,WAAW,KAAK,MAAM,KAAK,aAAa,KAAK,UAAU,KAAK,eAAe;AACtJ,gBAAU,SAAS,CAAC,GAAG,KAAK,MAAM,OAAO;AACzC,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AACA,UAAM,iBAAiB,kBAAkB,uDAAuD;AAAA,EAClG;AAAA,EACA,MAAM,oBAAoB;AACxB,UAAM,+BAA+B;AACrC,UAAM,WAAW,MAAM,KAAK,SAAS,QAAQ;AAAA,MAC3C,QAAQ;AAAA,IACV,CAAC;AACD,QAAI,YAAY,SAAS,SAAS,GAAG;AACnC,iBAAW,SAAS,CAAC,GAAG,KAAK,IAAI;AAAA,IACnC;AAAA,EACF;AAAA,EACA,MAAM,aAAa;AACjB,SAAK,aAAa;AAClB,SAAK,KAAK,eAAe,YAAY;AAAA,EACvC;AACF;",
  "names": []
}
